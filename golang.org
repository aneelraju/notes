* golang
** udemy - Learn How To Code: Google's Go (Golang) Programming Langauge - Todd McLeod
*** Introduction
**** Valuable Resources
  + Books/Resources
    + The Go Programming Language - Donovan and Kernighan
    + Go In Action - William Kennedy, Brian Ketelson, Erik St. Martin
      + Bill Kennedy's book
    + https://gobyexample.com - Bill Kennedy
    + https://www.golang-book.com - Caleb Doxsey
    + https://www.programming-books.io/essential/go/
      + guiding principles behind essential books
        + driven by examples
        + not limited in size like a traditional book
        + articles are cross-linked
        + search friendly
      + https://github.com/essentialbooks/books/blob/master/how-to-contribute.md - to contribute
    + https://golang.org/ref/spec - golang language spec
    + https://golang.org/doc/effective_go.html - effective go
    + blog.golang.org - golang blog
    + http://exercism.io - download and solve practice problems in over 30 different languages
      + http://exercism.io/languages/go/about - Golang exerices
        + https://github.com/exercism/cli
    + https://forum.golangbridge.org/
      + q&a forum on go programming
    + https://dave.cheney.net - Dave Cheney's blog
  + Links
    + Go here first - https://goo.gl/PHKg07
    + https://golang.org - official golang site
    + Presentations - https://goo.gl/Tbz6Xf
    + Github code - https://goo.gl/KbUroF
      + % git clone https://github.com/GoesToEleven/GolangTraining.git
    + Youtube - https://www.youtube.com/user/toddmcleod
    + Twitter - https://twitter.com/Todd_McLeod
  + Opensource projects of golang
    + Docker - Software containerization Technology
      + https://github.com/docker/docker
    + Kubernetes - Orchestration for Docker
      + https://github.com/GoogleCloudPlatform/kubernetes
    + Etcd and Fleet - Fleet: Single init system; Etcd: Distributed key-value store
      + https://github.com/coreos/etcd
    + Deis - Heroku-esque PaaS
      + https://github.com/deis/deis
    + Flynn - Opensource Platform as a Service
      + https://github.com/flynn/Flynn
    + Lime 
      + https://github.com/limetext/lime
    + Revel - High-Productivity, full-stack web framework
      + https://github.com/revel/revel
    + InfluxDB - Distributed time series database with no external dependencies
      + https://github.com/influxdb/influxdb
    + Syncthing - Protocol for synchronzing folders between multiple devices
      + https://github.com/syncthing/syncthing
    + Gogs (Go Git Service) - Host Git like service on your own hardware
      + https://github.com/gogits/gogs
    + Cockroach - Cloud-native SQL database for building global, scalable cloud services
      + https://github.com/cockroachdb/cockroach
    + go-github - go client library for accessing GitHub API v3
      + https://github.com/google/go-github
    + golang/net - supplementary Go networking libraries
      + https://github.com/golang/net
    + packer - tool to build identical machine images for mulitple platforms from a single source configuration
      + https://github.com/hashicorp/packer
    + drone - continuous delivery system built on container technology
      + https://github.com/drone/drone
    + golearn - machine library for go
      + https://github.com/sjwhitworth/golearn
    + nsq - realtime distributed messaging platform
      + https://github.com/nsqio/nsq
    + goconvey - go testing tool
      + https://github.com/smartystreets/goconvey
    + go tools - packages and tools that support golang
      + https://github.com/golang/tools
    + consul - tool for service discovery and configuration
      + https://github.com/hashicorp/consul
    + terraform - tool for building, changing and versioning infrastructure
      + https://github.com/hashicorp/terraform
**** Why choose the Go programming language?
  + Who made - Ken Thompson, Rob Pike and Robert Griesemer
  + purpose: performant; multiple-cores; concurrency; compiled; network; clean syntax; powerful standard library; garbage collected; portable; backed by google; open source
  + golang can be used for - webapps; network servers; mobile applications; machine learning; image processing; load balancers; system admin; hardware; scripts; crypto
  + https://golang.org/doc/faq - golang FAQ's
  + go at google - https://talks.golang.org/2012/splash.article
  + Farewell Node.js - https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b
  + golang jobs - https://www.golangprojects.com
  + companies using golang 
    + https://github.com/golang/go/wiki/GoUsers
    + https://www.quora.com/Other-than-Google-what-companies-are-using-Go-in-production
  + talk 90% perfect, 100% of the time - https://talks.golang.org/2014/gocon-tokyo.slide#1
  + still work to do - https://www.infoworld.com/article/2896575/google-go/googles-go-language-pros-and-cons.html
  + go blog - https://blog.golang.org/qihoo
**** Hello World!
  + go playground - https://play.golang.org
  + https://golang.org - official website; only standard library
    + standard library - https://golang.org/pkg/#stdlib
    + fmt package info - https://golang.org/pkg/fmt/
    + fmt source code - https://golang.org/src/fmt/
  + https://godoc.org - will have standard library and 3rd party library
*** Installing Go
**** The Terminal
  + terminal emulator for windows - download and install git desktop and change settings to 'shell'
    + open 'git shell' - you can start using linux commands
**** Installation Insights
  + https://golang.org/dl - golang downloads
**** Go Workspace
  + one folder - any name, any location
    + bin
    + pkg
    + src
      + github.com
        + <github username>
          + folder with code for project / repo
          + folder with code for project / repo
  + 'go get github.com/<username>/<projectname>' - install go package
**** Environment Variables
  + % env; # lists environment variables
  + % go env; # go related environment variable
    + two that need to be set are GOROOT and GOPATH
**** Linux - Machine Setup
  + www.aerospike.com - high performance nosql database
  + https://github.com/Oralordos/Digitalocean-Golang-and-Aerospike - github resource
    + tutorial to setupt Go and Aerospike in digitalocean
    + try setup instructions given in README.md
    + digital ocean login is as root, always create and run as user and give sudo permissions 
      + setup digitalocean linux server
        + % ssh root@<ip_address>
        + % adduser <username>; # enter details and passwd
        + % gpasswd -a <username> sudo; # adding <username> to group sudo
        + % su <username>
        + % cd /home/<username>
        + % mkdir .ssh
        + % chmod 700 .ssh
        + % vi .ssh/authorized_keys
        + paste key (cat ~/.ssh/id_rsa.pub) and save the file
        + % chmod 600 .ssh/authorized_keys
        + % exit
        + % ssh <username>@<ip_address>
        + % vi /etc/ssh/sshd_config
        + set the line 'PermitRootLogin' to 'no'; to restrict root access
        + set 'PasswordAuthentication' to 'no'; to disable logging in with a passwd
        + % service ssh restart; # restart ssh
        + % sudo ufw allow ssh; # allow ssh through firewall ufw (uncompleted firewall)
          + or % sudo ufw allow 22/tcp
        + % sudo ufw show added
        + % sudo ufw enable
        + % sudo ufw status
        + % sudo ufw status numbered; # can be used to delete via number (sudo ufw delete <number>)
        + % date
        + % sudo dpkg-reconfigure tzdata; # set timezone
        + set timezone in gui settings
        + % date
        + % sudo apt-get update
        + % sudo apt-get install ntp; # ntp will automatically place enable run on boot, ntp will sync time
        + % sudo apt-get upgrade
        + % sudo fallocate -l <size> /swapfile; # reserve the space; <size> recommended is equal to ram or double your ram
        + % sudo chmod 600 /swapfile; # restrict access to root only
        + % sudo mkswap /swapfile; # configure into a swapfile
        + % sudo swapon /swapfile; # start using swapfile
        + % sudo sh -c 'echo "/swafile none swap sw 0 0" >> /etc/fstab'; # setup automatically using he swapfile on boot; sh -c -> shell command
        + fstab is run on boot
        + % sudo poweroff
        + in digital ocean console (after m/c is shutdown) under snapshot take a snapshot
      + setup go server
        + go is cross compile, GOOS=linux GOARCH=amd64 go build -> it will build 64-bit linux executable on mac; unless there is no c other code
        + 'go help environment'; get help on environment variables
        + % ssh root@<ip_address>; # start digital ocean m/c 
        + % wget https://storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz; # download go
        + % tar -xzf <filename>; # extract go from the archive file
        + % sudo mv go /usr/local/go; # move go to default install location
        + % sudo chown root:root /usr/local/go; change owner to root and alter permissions
        + % sudo chmod 755 /usr/local/go
        + % mkdir gocode{,/bin,/pkg,/src}; # create workspace folder
        + Add 'export PATH=$PATH:/usr/local/go/bin' to /etc/profile
        + Add 'export GOPATH=$HOME/gocode' to ~/.profile
        + Add 'export PATH=$PATH:$HOME/gocode/bin' to ~/.profile
        + % rm <filename>; # remove archive file
        + % sudo apt-get install git; # install git
        + reconnect filewall to allow http connections
        + % exit
        + % ssh <username><@ip_address>
        + % go version; # check go version
        + % go env; # check go env variables
        + % sudo ufw allow http; # or 'sudo ufw allow 80/tcp'
        + % sudo ufw status; # check status
        + % sudo ufw allow https; # or 'sudo ufw allow 443/tcp'
        + % sudo apt-get install haproxy; # setup haproxy, haproxy is a load balancer
        + edit '/etc/haproxy/haproxy.cfg'; configure haproxy
        + Add 'retries 3' to the default section
        + Add 'option redispatch' to the default section
        + Add following block to the end of the file
          '''
          listen serv 0.0.0.0:80
            mode http
            option http-server-close
            timeout http-keep-alive 3000
            server serv 127.0.0.1:9000 check
          '''
        + for more info on haproxy setting - https://www.digitalocean.com/community/tutorials/how-to-use-haproxy-to-set-up-http-load-balancing-on-an-ubuntu-vps
        + % sudo service haproxy reload; # reload haproxy
        + % git clone https://github.com/Oralordos/Digitalocean-Golang-and-Aerospike.git; # get go code
        + % cd Digitalocean-Golang-and-Aerospike
        + % cd 01_helloWorld
        + % go run testServer.go
        + in browser <ip>; # you can see 'Hello World!'
        + save the snapshot and shutdown the server in digital ocean
*** Your Development Environment
**** section overview
  + some go commands - go, go env, go version, go get, go run, go build, go install
  + editors - webstorm, atom.io
**** go editors
  + https://www.jetbrains.com/webstorm - webstorm link
    + it's not free
  + https://atom.io - atom link, made by github
    + https://atom.io/packages/go-plus - go packages
**** creating your first project
  + % go fmt <file>; # formats go code
  + https://medium.com/@arshamshirvani/super-charge-your-sublime-text-for-golang-development-3239d9c376bb - sublime go ide settings
**** the go command & documentation
  + % go help [command]; # go command help
  + % go help [topic]; # go topic help
  + % https://golang.org/doc/; # golang documentation
  + % go build main.go; # build executables in current folder
  + % go clean; # remove binary
  + % go install; # build and puts in the <workspace>/bin
**** understanding github
  + github - code storage; code sharing; code collaboration; code versions; code searching; programmer assessing
  + youtube -> How Linux is Built - go through video
*** Computer Fundamentals
**** how computers work - part I
  + youtube tood mcleod channel playlist
**** github update command
  + % cd $GOPATH
  + % go get -u github.com/goestoeleven/golangtraining
  + % go help get; # go get help
**** text encoding
  + ASCII - American Standard Code for Information Interchange
  + UTF-8 - based on unicode, stores 1~8 bytes, popular coding schemes
    + first letters are ASCII
    + youtube video - "Characters, Symbols and the Unicode Miracle - Computerphile"
**** coding scheme programs
  + decimal
    + % cd work/01_getting-started/02_numeral-systems/01_decimal
    + % go fmt
    + % go run main.go
  + binary
    + % cd work/01_getting-started/02_numeral-systems/02_binary
    + % go fmt
    + % go run main.go
  + for print formats: https://godoc.org/fmt
  + hexadecimal
    + % cd work/01_getting-started/02_numeral-systems/03_hexadecimal
    + % go fmt
    + % go run main.go
  + loop
    + % cd work/01_getting-started/02_numeral-systems/04_loop
    + % go fmt
    + % go run main.go
  + https://golang.org/ref/spec - go language spec
  + https://golang.org/doc/effective_go.html - effective go
**** format printing
  + UTF-8
    + % cd work/01_getting-started/03_UTF-8
    + % go fmt
    + % go run main.go
**** section review 
  + % git status
  + % git add --all
  + % git status
  + % git commit -m "adds changes to 01 getting started folder"
  + % git push
*** Language Fundamentals
**** section overview
  + https://www.ardanlabs.com/ultimate-go - good go training
    + by william kennedy (author of go in action)
  + https://github.com/ardanlabs/gotraining
  + goinggo.net - william kennedy blog
**** packages
  + one folder, many files
    + package declaration in every file
    + package scope
      + something in one file is accessible to another file
    + imports have file scope
  + exported/unexported
    + we don't say (generally speaking): public/private
    + capitalization
      + capitalize: exported, visible outside the package
      + lowercase: unexported, not visible outside the package
    + % cd work/02_package/main
    + % go run main.go
**** go commands
  + % cd main/02_package/main
  + % go run main.go
  + % go build; # puts executable in the main package
  + % go clean; # removes executable
  + % go install; # puts executable in $GOPATH/bin
**** variables
  + shorthand variables, can only be used inside func
    + % cd work/03_variables/01_shorthand/01
    + % go fmt
    + % go run main.go
  + var - zero value
    + % cd work/03_variables/02_var_zero-value
    + % go fmt
    + % go run main.go  
  + type format verb: %T
    + % cd work/03_variables/01_shorthand/02
    + % go fmt
    + % go run main.go
  + declare, assign, initialize
  + look at all examples in 03_less-emphasis folder - these are less recommended ways to declare, assign and initialize variables
**** scope
  + levels of scope: universe, package, file, block (curly braces)
  + {} - braces; [] - brackets; () - parentheses
  + package level scope: for variables, not for imports
  + file level scope: imports
  + keep your scope tight, don't want to expose outside where you don't want to use
  + https://golang.org/ref/spec#Declarations_and_scope - scope info to golang spec
  + https://www.golang-book.com/books/web/01-02#scope - scope info in golang book
  + % cd work/04_scope/01_package-scope/01; % go fmt; % go run main.go
  + % cd work/04_scope/01_package-scope/02_visibility/main; % go fmt; % go run main.go
  + % cd work/04_scope/02_block-scope/01-this-does-not-compile; % go fmt; % go run main.go
  + % cd work/04_scope/03_order-matters; % go fmt; % go run main.go
  + % cd work/04_scope/04_variable-shadowing; % go fmt; % go run main.go
**** closure
  + % cd work/04_scope/02_block-scope/02_clousre/01; % go fmt; % go run main.go
  + % cd work/04_scope/02_block-scope/02_clousre/02; % go fmt; % go run main.go
  + % cd work/04_scope/02_block-scope/02_clousre/03; % go fmt; % go run main.go
  + % cd work/04_scope/02_block-scope/02_clousre/04; % go fmt; % go run main.go
**** langage spec
  + https://golang.org/ref/spec#Declarations_and_scope
  + https://golang-book.com/books/web/01-02#scope
**** blank identifier
  + allows you to tell the compiler you aren't using something
  + % cd work/05_blank-identifier/02_http-get_example/02_no-error-checking; % go fmt; % go run main.go
**** constants
  + % cd work/06_cosntants/01_constant; % go fmt; % go run main.go
  + % cd work/06_constants/02_multiple-initialization; % go fmt; % go run main.go
  + https://godoc.org/math - Unlike other languages, const don't have to be all caps in Go
  + % cd work/06_constants/03_iota; % go fmt; % go run
  + % cd work/06_constants/04_iota; % go fmt; % go run
  + % cd work/06_constants/05_iota; % go fmt; % go run
  + % cd work/06_constants/06_iota; % go fmt; % go run
  + https://blog.golang.org/constants - blog on constants (written by Rob Pike) 
**** memory addresses
  + https://www.youtube.com/user/toddmcleod -> playlist -> week 03 - computer concepts -> In class lecture - CIT - 15 Week 03
    + talks about memory addresses
  + % cd work/07_memory-address/01_showing-address; % go fmt; % go run main.go
  + % cd work/07_memory-address/02_using-address; % go fmt; % go run main.go
**** pointers
  + % cd work/08_pointers/01_referencing; % go fmt; % go run main.go
  + % cd work/08_pointers/02_dereferencing; % go fmt; % go run main.go
  + % cd work/08_pointers/03_using-pointers; % go fmt; % go run main.go
  + % cd work/08_pointers/04_using-pointers/01_no-pointer/01; % go fmt; % go run main.go
  + % cd work/08_pointers/04_using-pointers/01_no-pointer/02_see-the-addresses; % go fmt; % go run main.go
  + % cd work/08_pointers/04_using-pointers/02_pointer/01; % go fmt; % go run main.go
  + % cd work/08_pointers/04_using-pointers/02_pointer/02_see-the-addresses; % go fmt; % go run main.go
**** remainder
  + % cd work/09_remainder; % go fmt; % go run main.go
**** section review
  + malcom gladwell's "Outliers: The Story of Success" book
    + time on task with right coaches/teachers    
*** Control Flow
**** section overview
  + computer read programs
    + in sequence
    + loop/iterative: for, bool, do-while, continue, nested
    + conditionals: switch/case, if
**** for loop
  + https://golang.org/ref/spec#For_statements - language spec
  + https://golang.org/doc/effective_go.html#for - effective go (easy to understand)
  + Generally, I'm a doer. I do it and then read the theory
  + % cd work/10_for-loop/01_init-condition-post; % go fmt; % go run main.go
**** nested loops
  + % cd work/10_for-loop/02_nested; % go fmt; % go run main.go
**** conditions, break & continue
  + % cd work/10_for-loop/03_for-condition-while-ish; % go fmt; % go run main.go
  + % cd work/10_for-loop/04_for_no-condition; % go fmt; % go run main.go
  + % cd work/10_for-loop/05_for_break; % go fmt; % go run main.go
  + % cd work/10_for-loop/06_for_continue; % go fmt; % go run main.go
**** documentation & terminology
  + UTF - world most popular coding scheme; UTF-8 is a 4 byte coding scheme  
  + rune is character, an integer value identifying a unicode code of point
    + also an alias for int32 (like byte alias of int8)
**** rune
  + % cd work/10_for-loop/07_rune-loop_UTF8/01; % go fmt; % go run main.go
  + % cd work/10_for-loop/07_rune-loop_UTF8/02; % go fmt; % go run main.go
**** string type
  + 'i' represents code point (in single quotes)
  + 'text' - raw string (un-interpreted) type; "text" - interpreted string type
  + single quotes for runes and double-quotes and backslash for strings
  + string is a collection of runes
  + % cd work/99_svcc/01_string-to-html; % go fmt; % go run main.go
**** switch statements
  + % cd work/11_switch-statements/01_switch; % go fmt; % go run main.go
  + % cd work/11_switch-statements/02_fallthrough; % go fmt; % go run main.go
  + % cd work/11_switch-statements/03_multiple-evals; % go fmt; % go run main.go
  + % cd work/11_switch-statements/04_no-expression; % go fmt; % go run main.go
  + % cd work/11_switch-statements/05_on-type; % go fmt; % go run main.go
**** if statements
  + % cd work/12_if_else-if_else/01_eval-true; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/02_not-exclamation; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/03_init-statement; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/04_init-statement-error-invalid-code; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/05_if-else; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/06_if-elseif-else; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/07_if-elseif-elseif-else; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/08_divisibleByThree; % go fmt; % go run main.go
**** exercise solutions
  + % go fmt ./... ; # formats go file under each directory
  + % cd work/13_exercise-solutions/01_hello-world; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/02_hello-NAME; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/03_hello-user-inpute; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/04_hello-user-enters-numbers; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/05_even-numbers; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/06_fizzBuzz; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/07_threeFive; % go fmt; % go run main.go
**** section review
  + if learning something new. Small consistent effort paysoff more than large inconsistent effort
*** Functions
**** Section overview
**** Intro To Functions
**** Func Returns
**** Variadic Functions
**** Variadic Arguments
**** Func Expressions
**** Closure
**** Callbacks
**** Callback Example
**** Recursion
**** Defer
**** Pass By Value
**** Reference Types
**** Anonymouse Self-Executing Functions
**** Bool Expressions
**** Exercises - Part I
**** Exercises - Part II
**** Exercises - Part III
**** Section Review
*** Data Structures - Array
*** Data Structures - Slice
*** Data Structures - Map
*** Data Structures - Struct
*** Interfaces
*** Concurrency
*** Channels
*** Applied Concurrency
*** Concurrency Challenges
*** Concurrency Resources
*** Error Handling
*** Farewell


