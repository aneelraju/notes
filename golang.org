* golang
** udemy - Learn How To Code: Google's Go (Golang) Programming Langauge - Todd McLeod
*** Introduction
**** Valuable Resources
  + Books/Resources
    + The Go Programming Language - Donovan and Kernighan
    + Go In Action - William Kennedy, Brian Ketelson, Erik St. Martin
      + Bill Kennedy's book
    + https://gobyexample.com - Bill Kennedy
    + https://www.golang-book.com - Caleb Doxsey
    + https://www.programming-books.io/essential/go/
      + guiding principles behind essential books
        + driven by examples
        + not limited in size like a traditional book
        + articles are cross-linked
        + search friendly
      + https://github.com/essentialbooks/books/blob/master/how-to-contribute.md - to contribute
    + https://golang.org/ref/spec - golang language spec
    + https://golang.org/doc/effective_go.html - effective go
    + blog.golang.org - golang blog
    + http://exercism.io - download and solve practice problems in over 30 different languages
      + http://exercism.io/languages/go/about - Golang exerices
        + https://github.com/exercism/cli
    + https://forum.golangbridge.org/
      + q&a forum on go programming
    + https://dave.cheney.net - Dave Cheney's blog
    + go data structure code
      + https://github.com/emirpasic/gods
    + curated list of awesome Go frameworks, libraries and software
      + https://awesome-go.com/
  + Links
    + Go here first - https://goo.gl/PHKg07
    + https://golang.org - official golang site
    + Presentations - https://goo.gl/Tbz6Xf
    + Github code - https://goo.gl/KbUroF
      + % git clone https://github.com/GoesToEleven/GolangTraining.git
    + Youtube - https://www.youtube.com/user/toddmcleod
    + Twitter - https://twitter.com/Todd_McLeod
  + Opensource projects of golang
    + Docker - Software containerization Technology
      + https://github.com/docker/docker
    + Kubernetes - Orchestration for Docker
      + https://github.com/GoogleCloudPlatform/kubernetes
    + Etcd and Fleet - Fleet: Single init system; Etcd: Distributed key-value store
      + https://github.com/coreos/etcd
    + Deis - Heroku-esque PaaS
      + https://github.com/deis/deis
    + Flynn - Opensource Platform as a Service
      + https://github.com/flynn/Flynn
    + Lime 
      + https://github.com/limetext/lime
    + Revel - High-Productivity, full-stack web framework
      + https://github.com/revel/revel
    + InfluxDB - Distributed time series database with no external dependencies
      + https://github.com/influxdb/influxdb
    + Syncthing - Protocol for synchronzing folders between multiple devices
      + https://github.com/syncthing/syncthing
    + Gogs (Go Git Service) - Host Git like service on your own hardware
      + https://github.com/gogits/gogs
    + Cockroach - Cloud-native SQL database for building global, scalable cloud services
      + https://github.com/cockroachdb/cockroach
    + go-github - go client library for accessing GitHub API v3
      + https://github.com/google/go-github
    + golang/net - supplementary Go networking libraries
      + https://github.com/golang/net
    + packer - tool to build identical machine images for mulitple platforms from a single source configuration
      + https://github.com/hashicorp/packer
    + drone - continuous delivery system built on container technology
      + https://github.com/drone/drone
    + golearn - machine library for go
      + https://github.com/sjwhitworth/golearn
    + nsq - realtime distributed messaging platform
      + https://github.com/nsqio/nsq
    + goconvey - go testing tool
      + https://github.com/smartystreets/goconvey
    + go tools - packages and tools that support golang
      + https://github.com/golang/tools
    + consul - tool for service discovery and configuration
      + https://github.com/hashicorp/consul
    + terraform - tool for building, changing and versioning infrastructure
      + https://github.com/hashicorp/terraform
**** Why choose the Go programming language?
  + Who made - Ken Thompson, Rob Pike and Robert Griesemer
  + purpose: performant; multiple-cores; concurrency; compiled; network; clean syntax; powerful standard library; garbage collected; portable; backed by google; open source
  + golang can be used for - webapps; network servers; mobile applications; machine learning; image processing; load balancers; system admin; hardware; scripts; crypto
  + https://golang.org/doc/faq - golang FAQ's
  + go at google - https://talks.golang.org/2012/splash.article
  + Farewell Node.js - https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b
  + golang jobs - https://www.golangprojects.com
  + companies using golang 
    + https://github.com/golang/go/wiki/GoUsers
    + https://www.quora.com/Other-than-Google-what-companies-are-using-Go-in-production
  + talk 90% perfect, 100% of the time - https://talks.golang.org/2014/gocon-tokyo.slide#1
  + still work to do - https://www.infoworld.com/article/2896575/google-go/googles-go-language-pros-and-cons.html
  + go blog - https://blog.golang.org/qihoo
**** Hello World!
  + go playground - https://play.golang.org
  + https://golang.org - official website; only standard library
    + standard library - https://golang.org/pkg/#stdlib
    + fmt package info - https://golang.org/pkg/fmt/
    + fmt source code - https://golang.org/src/fmt/
  + https://godoc.org - will have standard library and 3rd party library
*** Installing Go
**** The Terminal
  + terminal emulator for windows - download and install git desktop and change settings to 'shell'
    + open 'git shell' - you can start using linux commands
**** Installation Insights
  + https://golang.org/dl - golang downloads
**** Go Workspace
  + one folder - any name, any location
    + bin
    + pkg
    + src
      + github.com
        + <github username>
          + folder with code for project / repo
          + folder with code for project / repo
  + 'go get github.com/<username>/<projectname>' - install go package
**** Environment Variables
  + % env; # lists environment variables
  + % go env; # go related environment variable
    + two that need to be set are GOROOT and GOPATH
**** Linux - Machine Setup
  + www.aerospike.com - high performance nosql database
  + https://github.com/Oralordos/Digitalocean-Golang-and-Aerospike - github resource
    + tutorial to setupt Go and Aerospike in digitalocean
    + try setup instructions given in README.md
    + digital ocean login is as root, always create and run as user and give sudo permissions 
      + setup digitalocean linux server
        + % ssh root@<ip_address>
        + % adduser <username>; # enter details and passwd
        + % gpasswd -a <username> sudo; # adding <username> to group sudo
        + % su <username>
        + % cd /home/<username>
        + % mkdir .ssh
        + % chmod 700 .ssh
        + % vi .ssh/authorized_keys
        + paste key (cat ~/.ssh/id_rsa.pub) and save the file
        + % chmod 600 .ssh/authorized_keys
        + % exit
        + % ssh <username>@<ip_address>
        + % vi /etc/ssh/sshd_config
        + set the line 'PermitRootLogin' to 'no'; to restrict root access
        + set 'PasswordAuthentication' to 'no'; to disable logging in with a passwd
        + % service ssh restart; # restart ssh
        + % sudo ufw allow ssh; # allow ssh through firewall ufw (uncompleted firewall)
          + or % sudo ufw allow 22/tcp
        + % sudo ufw show added
        + % sudo ufw enable
        + % sudo ufw status
        + % sudo ufw status numbered; # can be used to delete via number (sudo ufw delete <number>)
        + % date
        + % sudo dpkg-reconfigure tzdata; # set timezone
        + set timezone in gui settings
        + % date
        + % sudo apt-get update
        + % sudo apt-get install ntp; # ntp will automatically place enable run on boot, ntp will sync time
        + % sudo apt-get upgrade
        + % sudo fallocate -l <size> /swapfile; # reserve the space; <size> recommended is equal to ram or double your ram
        + % sudo chmod 600 /swapfile; # restrict access to root only
        + % sudo mkswap /swapfile; # configure into a swapfile
        + % sudo swapon /swapfile; # start using swapfile
        + % sudo sh -c 'echo "/swafile none swap sw 0 0" >> /etc/fstab'; # setup automatically using he swapfile on boot; sh -c -> shell command
        + fstab is run on boot
        + % sudo poweroff
        + in digital ocean console (after m/c is shutdown) under snapshot take a snapshot
      + setup go server
        + go is cross compile, GOOS=linux GOARCH=amd64 go build -> it will build 64-bit linux executable on mac; unless there is no c other code
        + 'go help environment'; get help on environment variables
        + % ssh root@<ip_address>; # start digital ocean m/c 
        + % wget https://storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz; # download go
        + % tar -xzf <filename>; # extract go from the archive file
        + % sudo mv go /usr/local/go; # move go to default install location
        + % sudo chown root:root /usr/local/go; change owner to root and alter permissions
        + % sudo chmod 755 /usr/local/go
        + % mkdir gocode{,/bin,/pkg,/src}; # create workspace folder
        + Add 'export PATH=$PATH:/usr/local/go/bin' to /etc/profile
        + Add 'export GOPATH=$HOME/gocode' to ~/.profile
        + Add 'export PATH=$PATH:$HOME/gocode/bin' to ~/.profile
        + % rm <filename>; # remove archive file
        + % sudo apt-get install git; # install git
        + reconnect filewall to allow http connections
        + % exit
        + % ssh <username><@ip_address>
        + % go version; # check go version
        + % go env; # check go env variables
        + % sudo ufw allow http; # or 'sudo ufw allow 80/tcp'
        + % sudo ufw status; # check status
        + % sudo ufw allow https; # or 'sudo ufw allow 443/tcp'
        + % sudo apt-get install haproxy; # setup haproxy, haproxy is a load balancer
        + edit '/etc/haproxy/haproxy.cfg'; configure haproxy
        + Add 'retries 3' to the default section
        + Add 'option redispatch' to the default section
        + Add following block to the end of the file
          '''
          listen serv 0.0.0.0:80
            mode http
            option http-server-close
            timeout http-keep-alive 3000
            server serv 127.0.0.1:9000 check
          '''
        + for more info on haproxy setting - https://www.digitalocean.com/community/tutorials/how-to-use-haproxy-to-set-up-http-load-balancing-on-an-ubuntu-vps
        + % sudo service haproxy reload; # reload haproxy
        + % git clone https://github.com/Oralordos/Digitalocean-Golang-and-Aerospike.git; # get go code
        + % cd Digitalocean-Golang-and-Aerospike
        + % cd 01_helloWorld
        + % go run testServer.go
        + in browser <ip>; # you can see 'Hello World!'
        + save the snapshot and shutdown the server in digital ocean
*** Your Development Environment
**** section overview
  + some go commands - go, go env, go version, go get, go run, go build, go install
  + editors - webstorm, atom.io
**** go editors
  + https://www.jetbrains.com/webstorm - webstorm link
    + it's not free
  + https://atom.io - atom link, made by github
    + https://atom.io/packages/go-plus - go packages
**** creating your first project
  + % go fmt <file>; # formats go code
  + https://medium.com/@arshamshirvani/super-charge-your-sublime-text-for-golang-development-3239d9c376bb - sublime go ide settings
**** the go command & documentation
  + % go help [command]; # go command help
  + % go help [topic]; # go topic help
  + % https://golang.org/doc/; # golang documentation
  + % go build main.go; # build executables in current folder
  + % go clean; # remove binary
  + % go install; # build and puts in the <workspace>/bin
**** understanding github
  + github - code storage; code sharing; code collaboration; code versions; code searching; programmer assessing
  + youtube -> How Linux is Built - go through video
*** Computer Fundamentals
**** how computers work - part I
  + youtube tood mcleod channel playlist
**** github update command
  + % cd $GOPATH
  + % go get -u github.com/goestoeleven/golangtraining
  + % go help get; # go get help
**** text encoding
  + ASCII - American Standard Code for Information Interchange
  + UTF-8 - based on unicode, stores 1~8 bytes, popular coding schemes
    + first letters are ASCII
    + youtube video - "Characters, Symbols and the Unicode Miracle - Computerphile"
**** coding scheme programs
  + decimal
    + % cd work/01_getting-started/02_numeral-systems/01_decimal
    + % go fmt
    + % go run main.go
  + binary
    + % cd work/01_getting-started/02_numeral-systems/02_binary
    + % go fmt
    + % go run main.go
  + for print formats: https://godoc.org/fmt
  + hexadecimal
    + % cd work/01_getting-started/02_numeral-systems/03_hexadecimal
    + % go fmt
    + % go run main.go
  + loop
    + % cd work/01_getting-started/02_numeral-systems/04_loop
    + % go fmt
    + % go run main.go
  + https://golang.org/ref/spec - go language spec
  + https://golang.org/doc/effective_go.html - effective go
**** format printing
  + UTF-8
    + % cd work/01_getting-started/03_UTF-8
    + % go fmt
    + % go run main.go
**** section review 
  + % git status
  + % git add --all
  + % git status
  + % git commit -m "adds changes to 01 getting started folder"
  + % git push
*** Language Fundamentals
**** section overview
  + https://www.ardanlabs.com/ultimate-go - good go training
    + by william kennedy (author of go in action)
  + https://github.com/ardanlabs/gotraining
  + goinggo.net - william kennedy blog
**** packages
  + one folder, many files
    + package declaration in every file
    + package scope
      + something in one file is accessible to another file
    + imports have file scope
  + exported/unexported
    + we don't say (generally speaking): public/private
    + capitalization
      + capitalize: exported, visible outside the package
      + lowercase: unexported, not visible outside the package
    + % cd work/02_package/main
    + % go run main.go
**** go commands
  + % cd main/02_package/main
  + % go run main.go
  + % go build; # puts executable in the main package
  + % go clean; # removes executable
  + % go install; # puts executable in $GOPATH/bin
**** variables
  + shorthand variables, can only be used inside func
    + % cd work/03_variables/01_shorthand/01
    + % go fmt
    + % go run main.go
  + var - zero value
    + % cd work/03_variables/02_var_zero-value
    + % go fmt
    + % go run main.go  
  + type format verb: %T
    + % cd work/03_variables/01_shorthand/02
    + % go fmt
    + % go run main.go
  + declare, assign, initialize
  + look at all examples in 03_less-emphasis folder - these are less recommended ways to declare, assign and initialize variables
**** scope
  + levels of scope: universe, package, file, block (curly braces)
  + {} - braces; [] - brackets; () - parentheses
  + package level scope: for variables, not for imports
  + file level scope: imports
  + keep your scope tight, don't want to expose outside where you don't want to use
  + https://golang.org/ref/spec#Declarations_and_scope - scope info to golang spec
  + https://www.golang-book.com/books/web/01-02#scope - scope info in golang book
  + % cd work/04_scope/01_package-scope/01; % go fmt; % go run main.go
  + % cd work/04_scope/01_package-scope/02_visibility/main; % go fmt; % go run main.go
  + % cd work/04_scope/02_block-scope/01-this-does-not-compile; % go fmt; % go run main.go
  + % cd work/04_scope/03_order-matters; % go fmt; % go run main.go
  + % cd work/04_scope/04_variable-shadowing; % go fmt; % go run main.go
**** closure
  + % cd work/04_scope/02_block-scope/02_clousre/01; % go fmt; % go run main.go
  + % cd work/04_scope/02_block-scope/02_clousre/02; % go fmt; % go run main.go
  + % cd work/04_scope/02_block-scope/02_clousre/03; % go fmt; % go run main.go
  + % cd work/04_scope/02_block-scope/02_clousre/04; % go fmt; % go run main.go
**** langage spec
  + https://golang.org/ref/spec#Declarations_and_scope
  + https://golang-book.com/books/web/01-02#scope
**** blank identifier
  + allows you to tell the compiler you aren't using something
  + % cd work/05_blank-identifier/02_http-get_example/02_no-error-checking; % go fmt; % go run main.go
**** constants
  + % cd work/06_cosntants/01_constant; % go fmt; % go run main.go
  + % cd work/06_constants/02_multiple-initialization; % go fmt; % go run main.go
  + https://godoc.org/math - Unlike other languages, const don't have to be all caps in Go
  + % cd work/06_constants/03_iota; % go fmt; % go run
  + % cd work/06_constants/04_iota; % go fmt; % go run
  + % cd work/06_constants/05_iota; % go fmt; % go run
  + % cd work/06_constants/06_iota; % go fmt; % go run
  + https://blog.golang.org/constants - blog on constants (written by Rob Pike) 
**** memory addresses
  + https://www.youtube.com/user/toddmcleod -> playlist -> week 03 - computer concepts -> In class lecture - CIT - 15 Week 03
    + talks about memory addresses
  + % cd work/07_memory-address/01_showing-address; % go fmt; % go run main.go
  + % cd work/07_memory-address/02_using-address; % go fmt; % go run main.go
**** pointers
  + % cd work/08_pointers/01_referencing; % go fmt; % go run main.go
  + % cd work/08_pointers/02_dereferencing; % go fmt; % go run main.go
  + % cd work/08_pointers/03_using-pointers; % go fmt; % go run main.go
  + % cd work/08_pointers/04_using-pointers/01_no-pointer/01; % go fmt; % go run main.go
  + % cd work/08_pointers/04_using-pointers/01_no-pointer/02_see-the-addresses; % go fmt; % go run main.go
  + % cd work/08_pointers/04_using-pointers/02_pointer/01; % go fmt; % go run main.go
  + % cd work/08_pointers/04_using-pointers/02_pointer/02_see-the-addresses; % go fmt; % go run main.go
**** remainder
  + % cd work/09_remainder; % go fmt; % go run main.go
**** section review
  + malcom gladwell's "Outliers: The Story of Success" book
    + time on task with right coaches/teachers    
*** Control Flow
**** section overview
  + computer read programs
    + in sequence
    + loop/iterative: for, bool, do-while, continue, nested
    + conditionals: switch/case, if
**** for loop
  + https://golang.org/ref/spec#For_statements - language spec
  + https://golang.org/doc/effective_go.html#for - effective go (easy to understand)
  + Generally, I'm a doer. I do it and then read the theory
  + % cd work/10_for-loop/01_init-condition-post; % go fmt; % go run main.go
**** nested loops
  + % cd work/10_for-loop/02_nested; % go fmt; % go run main.go
**** conditions, break & continue
  + % cd work/10_for-loop/03_for-condition-while-ish; % go fmt; % go run main.go
  + % cd work/10_for-loop/04_for_no-condition; % go fmt; % go run main.go
  + % cd work/10_for-loop/05_for_break; % go fmt; % go run main.go
  + % cd work/10_for-loop/06_for_continue; % go fmt; % go run main.go
**** documentation & terminology
  + UTF - world most popular coding scheme; UTF-8 is a 4 byte coding scheme  
  + rune is character, an integer value identifying a unicode code of point
    + also an alias for int32 (like byte alias of int8)
**** rune
  + % cd work/10_for-loop/07_rune-loop_UTF8/01; % go fmt; % go run main.go
  + % cd work/10_for-loop/07_rune-loop_UTF8/02; % go fmt; % go run main.go
**** string type
  + 'i' represents code point (in single quotes)
  + 'text' - raw string (un-interpreted) type; "text" - interpreted string type
  + single quotes for runes and double-quotes and backslash for strings
  + string is a collection of runes
  + % cd work/99_svcc/01_string-to-html; % go fmt; % go run main.go
**** switch statements
  + % cd work/11_switch-statements/01_switch; % go fmt; % go run main.go
  + % cd work/11_switch-statements/02_fallthrough; % go fmt; % go run main.go
  + % cd work/11_switch-statements/03_multiple-evals; % go fmt; % go run main.go
  + % cd work/11_switch-statements/04_no-expression; % go fmt; % go run main.go
  + % cd work/11_switch-statements/05_on-type; % go fmt; % go run main.go
**** if statements
  + % cd work/12_if_else-if_else/01_eval-true; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/02_not-exclamation; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/03_init-statement; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/04_init-statement-error-invalid-code; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/05_if-else; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/06_if-elseif-else; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/07_if-elseif-elseif-else; % go fmt; % go run main.go
  + % cd work/12_if_else-if_else/08_divisibleByThree; % go fmt; % go run main.go
**** exercise solutions
  + % go fmt ./... ; # formats go file under each directory
  + % cd work/13_exercise-solutions/01_hello-world; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/02_hello-NAME; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/03_hello-user-inpute; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/04_hello-user-enters-numbers; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/05_even-numbers; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/06_fizzBuzz; % go fmt; % go run main.go
  + % cd work/13_exercise-solutions/07_threeFive; % go fmt; % go run main.go
**** section review
  + if learning something new. Small consistent effort paysoff more than large inconsistent effort
*** Functions
**** Intro To Functions
  + % cd work/14_functions/01_main; % go fmt main.go; % go run main.go
  + % cd work/14_functions/02_param-arg; % go fmt main.go; % go run main.go
  + % cd work/14_functions/03_two-params/01; % go fmt main.go; % go run main.go
  + % cd work/14_functions/03_two-params/02; % go fmt main.go; % go run main.go
**** Func Returns
  + % cd work/14_functions/04_return; % go fmt main.go; % go run main.go
  + % cd work/14_functions/05_return-naming; % go fmt main.go; % go run main.go
  + % cd work/14_functions/06_return-multiple; % go fmt main.go; % go run main.go
**** Variadic Functions
  + % cd work/14_functions/07_variadic-params; % go fmt main.go; % go run main.go
**** Variadic Arguments
  + % cd work/14_functions/08_variadic-args; % go fmt main.go; % go run main.go
  + % cd work/14_functions/09_slice-param-args; % go fmt main.go; % go run main.go
**** Func Expressions
  + % cd work/14_functions/10_func-expression/01_before-func-expression; % go fmt main.go; % go run main.go
  + % cd work/14_functions/10_func-expression/02_func-expression; % go fmt main.go; % go run main.go
  + % cd work/14_functions/10_func-expression/03_func-expression_shows-type; % go fmt main.go; % go run main.go
  + % cd work/14_functions/10_func-expression/04_another-way_func-expression; % go fmt main.go; % go run main.go
  + % cd work/14_functions/10_func-expression/05_another-way_func-expression_shows-type; % go fmt main.go; % go run main.go
**** Closure
  + % cd work/14_functions/11_closure/01; % go fmt main.go; % go run main.go
  + % cd work/14_functions/11_closure/02; % go fmt main.go; % go run main.go
  + % cd work/14_functions/11_closure/03; % go fmt main.go; % go run main.go
  + % cd work/14_functions/11_closure/04; % go fmt main.go; % go run main.go
**** Callbacks
  + % cd work/14_functions/12_callback/01_print-nums; % go fmt main.go; % go run main.go
**** Callback Example
  + % cd work/14_functions/12_callback/02_filter-nums; % go fmt main.go; % go run main.go
**** Recursion
  + % cd work/14_functions/13_recursion; % go fmt main.go; % go run main.go
**** Defer
  + % cd work/14_functions/14_defer/01_no-defer; % go fmt main.go; % go run main.go
  + % cd work/14_functions/14_defer/02_defer; % go fmt main.go; % go run main.go
**** Pass By Value
  + % cd work/14_functions/15_passing-by-value/01_int; % go fmt main.go; % go run main.go
  + % cd work/14_functions/15_passing-by-value/02_int-pointer; % go fmt main.go; % go run main.go
  + % cd work/14_functions/15_passing-by-value/03_string; % go fmt main.go; % go run main.go
  + % cd work/14_functions/15_passing-by-value/04_string-pointer; % go fmt main.go; % go run main.go
**** Reference Types
  + % cd work/14_functions/15_passing-by-value/05_REFERENCE-TYPE; % go fmt main.go; % go run main.go
  + % cd work/14_functions/15_passing-by-value/06_REFERENCE-TYPE; % go fmt main.go; % go run main.go
  + % cd work/14_functions/15_passing-by-value/07_struct-pointer; % go fmt main.go; % go run main.go
**** Anonymouse Self-Executing Functions
  + % cd work/14_functions/15_passing-by-value/05_REFERENCE-TYPE; % go fmt main.go; % go run main.go
**** Bool Expressions
  + Dr Axel Rauschmayer - free online books of JavaScript
    + search for "Expressions versus statements in JavaScript"
  + % cd work/15_bool-expressions/01_true-false; % go fmt main.go; % go run main.go
  + % cd work/15_bool-expressions/02_not; % go fmt main.go; % go run main.go
  + % cd work/15_bool-expressions/03_or; % go fmt main.go; % go run main.go
  + % cd work/15_bool-expressions/04_and; % go fmt main.go; % go run main.go
**** Exercises - Part I
  + project euler - https://projecteuler.net/
    + series of challenging mathematical/computer programming problems
  + % cd work/16_exercise-solutions/01_half/01; % go fmt main.go; % go run main.go
  + % cd work/16_exercise-solutions/01_half/02; % go fmt main.go; % go run main.go
**** Exercises - Part II
  + % cd work/16_exercise-solutions/02_func-expression; % go fmt main.go; % go run main.go
  + % cd work/16_exercise-solutions/03_variadic-greatest; % go fmt main.go; % go run main.go
**** Exercises - Part III
  + % cd work/16_exercise-solutions/04_bool-expression; % go fmt main.go; % go run main.go
  + % cd work/16_exercise-solutions/05_params-and-args; % go fmt main.go; % go run main.go
*** Data Structures - Array
**** Data Structures Overview
  + https://golang.org/ref/spec#Array_types
**** Array
  + % cd work/17_array/01; % go fmt main.go; % go run main.go
  + % cd work/17_array/02; % go fmt main.go; % go run main.go
**** Array Examples
  + % cd work/17_array/03; % go fmt main.go; % go run main.go
  + % cd work/17_array/04; % go fmt main.go; % go run main.go
  + % cd work/17_array/05; % go fmt main.go; % go run main.go
*** Data Structures - Slice
**** Slices
  + https://golang.org/ref/spec#Slice_types
  + https://gobyexample.com -> Slices
  + slice vs slicing vs index access
    + mySlice := []int{1, 2, 3, 4, 5}; 
    + mySlice -> slice
    + mySlice[2:4] -> slicing a slice
    + mySlice[2] -> index access
  + https://golang.org/ref/spec -> Slice types
  + % cd work/18_slice/01-int-slice; % go fmt main.go; % go run main.go
  + % cd work/18_slice/02-int-slice; % go fmt main.go; % go run main.go
**** Slice Examples
  + % cd work/18_slice/03_int-slice; % go fmt main.go; % go run main.go
  + % cd work/18_slice/04_string-slice; % go fmt main.go; % go run main.go
  + % cd work/18_slice/05_slicing-a-slice/01; % go fmt main.go; % go run main.go
  + % cd work/18_slice/05_slicing-a-slice/02; % go fmt main.go; % go run main.go
  + % cd work/18_slice/06_make; % go fmt main.go; % go run main.go
  + % cd work/18_slice/07_append-invalid; % go fmt main.go; % go run main.go
  + % cd work/18_slice/08_append; % go fmt main.go; % go run main.go
  + % cd work/18_slice/09_append-beyond-capacity; % go fmt main.go; % go run main.go
  + % cd work/18_slice/10_append_slice-to-slice/01_slice-of-ints; % go fmt main.go; % go run main.go
  + % cd work/18_slice/10_append-slice-to-slice/01_slice-of-ints; % go fmt main.go; % go run main.go
  + % cd work/18_slice/11_delete; % go fmt main.go; % go run main.go
**** More Slice Examples
  + % cd work/18_slice/12_multi-dimensional/05_slice-of-slice-of-string; % go fmt main.go; % go run main.go
  + % cd work/18_slice/12_multi-dimensional/06_slice-of-slice-of-int; % go fmt main.go; % go run main.go
**** Creating A Slice
  + 'godoc.org/fmt -> files' for source documentation
  + 'https://golang.org/pkg/fmt' - documentation
  + 'https://golang.org/src/fmt' - source code
  + % cd work/18_slice/12_multi-dimensional/01_shorthand-slice; % go fmt main.go; % go run main.go
  + % cd work/18_slice/12_multi-dimensional/02_var-slice; % go fmt main.go; % go run main.go
  + % cd work/18_slice/12_multi-dimensional/03_make-slice; % go fmt main.go; % go run main.go
  + % cd work/18_slice/12_multi-dimensional/04_comparing_shorthand_var_make/01_shorthand-slice; % go fmt main.go; % go run main.go
  + % cd work/18_slice/12_multi-dimensional/04_comparing_shorthand_var_make/02_var-slice; % go fmt main.go; % go run main.go
  + % cd work/18_slice/12_multi-dimensional/04_comparing_shorthand_var_make/03_make-slice; % go fmt main.go; % go run main.go
**** Incrementing A Slice Item
  + % cd work/18_slice/13_int-slice-plus-plus; % go fmt main.go; % go run main.go
  **** Section Review
*** Data Structures - Map
**** Maps Introduction
  + https://golang.org/ref/spec#Map_types
**** Map Examples - Part I
  + https://gobyexample.com -> maps
**** Map Examples - Part II
  + % cd work/19_map/01_var_nil-map; % go fmt main.go; % go run main.go
  + % cd work/19_map/02_var_make; % go fmt main.go; % go run main.go
  + % cd work/19_map/03_shorthand_make; % go fmt main.go; % go run main.go
  + % cd work/19_map/04_shorthand_composite-literal; % go fmt main.go; % go run main.go
  + % cd work/19_map/05_shorthand_composite-literal; % go fmt main.go; % go run main.go
  + % cd work/19_map/06_adding-entry; % go fmt main.go; % go run main.go
  + % cd work/19_map/07_len; % go fmt main.go; % go run main.go
  + % cd work/19_map/08_updating-entry; % go fmt main.go; % go run main.go
  + % cd work/19_map/09_deleting-entry; % go fmt main.go; % go run main.go
**** Map Examples - Part III
  + % cd work/19_map/10_comman-ok-idiom_val-exists; % go fmt main.go; % go run main.go
  + % cd work/19_map/11_deleting-entry_no-error; % go fmt main.go; % go run main.go
  + % cd work/19_map/12_comman-ok-idiom_val-not-exists; % go fmt main.go; % go run main.go
**** Map Documentation
  + https://www.golang-book.com/books/intro/6 - maps
  + https:/github.com/golang/go -> search for make(map
  + https://golang.org/ref/spec#Map_types
  + https://golang.org/doc/effective_go.html#maps
**** Map Range Loop
  + % cd work/19_map/13_loop-range; % go fmt main.go; % go run main.go
**** GitHub Pull
  + before submitting local chages
    + % git status
    + % git pull
    + % git add --all
    + % git commit -m "changes"
    + % git status
    + % git pull
    + % git push; # now in sync with git 
**** Hash Tables
  + book reference
    + rank 1 - The Go Programming Language - Brian W Kernighan
    + rank 2 - Go in Action - William Kennedy
    + rank 3 - the way to go - Ivo Balbaert
      + see section 4.4.2 Value types and reference types - good description
        + reference types are slices, maps and channels
  + https://blog.golang.org/go-maps-in-action
  + www.goinggo.net/2013/12/macro-view-of-map-internals-in-go.html
  + https://en.wikipedia.org/wiki/Hash_table
    + in many situations, hash tables turn out to be more efficient for search than search trees or any other table lookup structure
    + they are widely used for associative arrays, database indexing, caches and sets
    + a hash table uses a hash function to compute an index into an array of buckets from which the desired value can be found
**** Hashing Words
  + https://godoc.org/bufio
  + % cd work/19_map/14_hash-table/04_english-alphabet/01; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/04_english-alphabet/01; % go fmt main.go; % go run main.go
**** Hashing Words II
  + % cd work/19_map/14_hash-table/01_letter-buckets/10_hash-letter-buckets; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/01_letter-buckets/11_hash-remainder-buckets; % go fmt main.go; % go run main.go
**** Build A Hash Table
  + % cd work/19_map/14_hash-table/01_letter-buckets/01_runes-are-numbers; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/01_letter-buckets/02_strings-to-rune-conversion; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/01_letter-buckets/03_string-index-access; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/01_letter-buckets/04_remainder-bucket-selection; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/01_letter-buckets/05-hash-function; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/01_letter-buckets/06_get; % go fmt main.go; % go run main.go
**** Finished Hash Algorithm
  + % cd work/19_map/14_hash-table/01_letter-buckets/07_scanner; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/01_letter-buckets/08_moby-dicks-words; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/01_letter-buckets/09_int-slice-plus-plus; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/02_even-dstribution-hash; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/03_words-in-buckets/01_slice-bucket; % go fmt main.go; % go run main.go
  + % cd work/19_map/14_hash-table/03_words-in-buckets/02_map-bucket; % go fmt main.go; % go run main.go
*** Data Structures - Struct
**** Structs Introduction
  + https://golang.org/ref/spec#Struct_types
**** OOP in Go
  + www.goinggo.net/2015/09/composition-with-go.html
  + https://golang.org/doc/effective_go.html -> search for Embedding
  + work/19_map/20_struct/00_object-oriented/notes.txt - go through the notes
**** User-Defined Types
  + % cd work/20_struct/01_user-defined-types/01_alias-type_not-idiomatic; % go fmt main.go; % go run main.go
  + % cd work/20_struct/01_user-defined-types/02_static-typing; % go fmt main.go; % go run main.go
    + go through work/20_struct/01_user-defined-types/notes.txt
  + % cd work/20_struct/02_struct_fields_values_initialization; % go fmt main.go; % go run main.go
    + go through notes.txt
  + https://golang.org/ref/spec#Struct_types
  + https://godoc.org/encoding/json -> json package document
**** Composition
  + % cd work/20_struct/03_methods; % go fmt main.go; % go run main.go
  + % cd work/20_struct/04_embedded-types/; % go fmt main.go; % go run main.go
  + % cd work/20_struct/05_promotion/01_overriding-fields; % go fmt main.go; % go run main.go
  + % cd work/20_struct/05_promotion/02_overriding-methods; % go fmt main.go; % go run main.go
  + % cd work/20_struct/06_struct-pointer; % go fmt main.go; % go run main.go
**** JSON Marshal
  + www.jsoneditoronline.org
  + marshal/unmarshal into string
  + encode/decode into stream
  + https://en.wikipedia.org/wiki/JSON -> info about JSON
  + https://godoc.org/encoding/json -> json package document
  + % cd work/20_struct/07_marshal_unmarshal/01_marshal/01_exported; % go fmt main.go; % go run main.go
  + % cd work/20_struct/07_marshal_unmarshal/01_marshal/02_unexported; % go fmt main.go; % go run main.go
  + % cd work/20_struct/07_marshal_unmarshal/01_marshal/03_tags; % go fmt main.go; % go run main.go
**** JSON Unmarshal
  + % cd work/20_struct/07_marshal_unmarshal/02_unmarshal/01; % go fmt main.go; % go run main.go
  + % cd work/20_struct/07_marshal_unmarshal/02_unmarshal/02_tags; % go fmt main.go; % go run main.go
**** JSON Encode
  + % cd work/20_struct/08_encode_decode/01_encode; % go fmt main.go; % go run main.go
**** JSON Decode
  + % cd work/20_struct/08_encode_decode/02_decode; % go fmt main.go; % go run main.go
*** Interfaces
**** Interfaces Introduction
  + The Go Programming Language Book - Donovan and Kernighan - Highly Recommended
  + Interfaces does Substitutability
  + interfaces are types
**** Interface Examples
  + go through work/21_interfaces/00_notes.txt
  + % cd work/21_interfaces/01_interface/01_no-interface; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/01_interface/02_interface; % go fmt main.go; % go run main.go
**** Code Substitutability
  + % cd work/21_interfaces/01_interface/03_interface; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/01_interface/04_interface; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/01_interface/05_io-copy/01_no-error-checking; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/01_interface/05_io-copy/02_error-checking; % go fmt main.go; % go run main.go
**** Bill Kennedy
  + go through work/21_interfaces/00_notes.txt -> Bill Kennedy section
**** Donovan & Kernighan
  + go through work/21_interfaces/00_notes.txt -> Donovan & Kernighan section
**** Sort Package
  + https://godoc.org/io#Reader - go through Reader interface
  + https://godoc.org/io#Writer - go through Writer interface
  + https://godoc.org/net/http#Handler - go through Handler interface
  + https://godoc.org/sort#Interface - go through sort package interface
  + go through work/21_interfaces/02_package-sort/00_notes.txt 
**** Sort Solution
  + % cd work/21_interfaces/02_package-sort/01_sort-names; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/02_package-sort/02_sort-names_type-StringSclie; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/02_package-sort/03_sort-Strings; % go fmt main.go; % go run main.go
**** Sort Reverse
  + % cd work/21_interfaces/02_package-sort/04_sort-names_type-StringSlice_reverse; % go fmt main.go; % go run main.go
**** Sort Slice int
  + % cd work/21_interfaces/02_package-sort/05_sort-int_type-IntSlice; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/02_package-sort/06_sort-int_type-IntSlice_reverse; % go fmt main.go; % go run main.go 
  + % cd work/21_interfaces/02_package-sort/07_sort-Ints; % go fmt main.go; % go run main.go 
  + % cd work/21_interfaces/02_package-sort/08_standard-library-example; % go fmt main.go; % go run main.go
**** Empty Interface
  + % cd work/21_interfaces/03_empty-interface/01_no-interface; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/03_empty-interface/02_empty-interface; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/03_empty-interface/03_param-accepts-any-type; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/03_empty-interface/04_slice-of-any-type; % go fmt main.go; % go run main.go
**** Method Sets
  + https://golang.org/ref/spec#Method_sets - method sets
  + % cd work/21_interfaces/04_method-sets/01_value-receiver_value-type; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/04_method-sets/02_value-receiver_pointer-type; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/04_method-sets/03_pointer-receiver_pointer-type; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/04_method-sets/04_pointer-receiver_value-type; % go fmt main.go; % go run main.go
**** Conversion vs Assertion
  + https://godoc.org/strconv - strconv package
  + % cd work/21_interfaces/05_conversion-vs-assertion/01_conversion/01_int-to-float; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/05_conversion-vs-assertion/01_conversion/02_float-to-int; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/05_conversion-vs-assertion/01_conversion/03_rune-to-string; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/05_conversion-vs-assertion/01_conversion/04_rune-to-slice-of-bytes-to-string; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/05_conversion-vs-assertion/01_conversion/05_string-to-slice-of-bytes; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/05_conversion-vs-assertion/01_conversion/06_strconv/01_Atoi; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/05_conversion-vs-assertion/01_conversion/06_strconv/02_Itoa; % go fmt main.go; % go run main.go
  + % cd work/21_interfaces/05_conversion-vs-assertion/01_conversion/06_strconv/03_ParseInt; % go fmt main.go; % go run main.go
 + % cd work/21_interfaces/05_conversion-vs-assertion/02_assertion/01_non-interface-error_invalid-code; % go fmt main.go; % go run main.go
 + % cd work/21_interfaces/05_conversion-vs-assertion/02_assertion/02_interface-string; % go fmt main.go; % go run main.go
 + % cd work/21_interfaces/05_conversion-vs-assertion/02_assertion/03_interface-string_not-ok; % go fmt main.go; % go run main.go
 + % cd work/21_interfaces/05_conversion-vs-assertion/02_assertion/04_interface-int_print-type; % go fmt main.go; % go run main.go
 + % cd work/21_interfaces/05_conversion-vs-assertion/02_assertion/05_interface-int_mistmatched-types-error; % go fmt main.go; % go run main.go
 + % cd work/21_interfaces/05_conversion-vs-assertion/02_assertion/06_interface-int-sum; % go fmt main.go; % go run main.go
 + % cd work/21_interfaces/05_conversion-vs-assertion/02_assertion/07_casting-reminder; % go fmt main.go; % go run main.go
 + % cd work/21_interfaces/05_conversion-vs-assertion/02_assertion/08_interface-cast-error_need-type-assertion; % go fmt main.go; % go run main.go
*** Concurrency
**** Concurrency & WaitGroup
 + % cd work/22_go-routines/01_no-go; % go fmt main.go; % go run main.go
 + % cd work/22_go-routines/02_go_concurrency; % go fmt main.go; % go run main.go
 + % cd work/22_go-routines/03_wait-group; % go fmt main.go; % go run main.go
 + % cd work/22_go-routines/04_time-sleep; % go fmt main.go; % go run main.go
**** Parallelism
 + "concurrency" is the composition of independently executing processes 
  + Concurrency is about dealing with lots of things at once
 + "parallelism" is the simultaneous execution of (possibly related) computation
  + Parallelism is about doing lots of things at once
 + % cd work/22_go-routines/05_gomaxprocs_parallelism; % go fmt main.go; % go run main.go
**** Race Conditions
 + https://github.com/ardanlabs/gotraining -> search for race
 + % cd work/22_go-routines/06_race-condition; % go fmt main.go; % go run main.go
**** Mutex
 + mutex - mutually exclusive
 + % cd work/22_go-routines/07_mutex; % go fmt main.go; % go run main.go / % go run -race main.go 
**** Atomicity
 + https://godoc.org/sync/atomic
 + % cd work/22_go-routines/08_atomicity; % go fmt main.go; % go run main.go / % go run -race main.go 
**** Review & Channels Preview
 + Book - The Way To Go - Ivo Balbert -> chapter 14 - go routines and channels
*** Channels
**** Channels - Introduction
 + https://golang.org/ref/spec -> Channel types
 + https://golang.org/doc/effective_go.html#concurrency
 + http://go-proverbs.github.io - go proverbs
 + youtube - Go Proverbs - Rob Pike - Gopherfest - Nov 18, 2015
 + % cd work/22_go-routines/09_channels/00_unbuffered-channels-block; % go fmt main.go; % go run -race main.go
**** Range Clause
 + % cd work/22_go-routines/09_channels/02_n-to-1/01_race-condition; % go fmt main.go; % go run -race main.go
**** N-to-1
 + % cd work/22_go-routines/09_channels/02_n-to-1/02_wait-group; % go fmt main.go; % go run -race main.go
**** Semaphores - Part 1
 + % cd work/22_go-routines/09_channels/02_n-to-1/03_semaphore; % go fmt main.go; % go run -race main.go
 + % cd work/22_go-routines/09_channels/02_n-to-1/04_semaphore_wrong-way; % go fmt main.go; % go run -race main.go
**** Semaphores - Part 2
 + % cd work/22_go-routines/09_channels/02_n-to-1/05_n-times_to_1; % go fmt main.go; % go run -race main.go
**** 1-to-N
 + % cd work/22_go-routines/09_channels/03_1-to-n/01_1_to_2-times; % go fmt main.go; % go run -race main.go
 + % cd work/22_go-routines/09_channels/03_1-to-n/02_1_to_n-times; % go fmt main.go; % go run -race main.go
**** Channels as Arguments & Returns
 + % cd work/22_go-routines/09_channels/04_pass-return-channels; % go fmt main.go; % go run -race main.go
**** Channel Direction
 + % cd work/22_go-routines/09_channels/05_channel-direction; % go fmt main.go; % go run -race main.go
 + % cd work/22_go-routines/09_channels/06_refactor; % go fmt main.go; % go run -race main.go
*** Applied Concurrency
*** Concurrency Challenges
*** Concurrency Resources
**** Additional Resources
  + https://github.com/ardanlabs/gotraining -> search for go routine, chan, atomic and look at examples
    + go through channels examples
  + golang blog - blog.golang.org
  + effective go - https://golang.org/doc/effective_go.html#concurrency
  + golang spec - https://golang.org/ref/spec#Channel_types
  + go by example - https://gobyexample.com/
  + caleb doxsey book - https://www.golang-book.com - go through concurrency
**** Links
  + concurrency
      + visualizing concurrency in go
        + http://divan.github.io/posts/go_concurrency_visualize/
      + dancing with go's mutexes
        + https://medium.com/@deckarep/dancing-with-go-s-mutexes-92407ae927bf#.wjr1u2xjm
  + memory allocation
      + http://stackoverflow.com/questions/34197248/how-can-i-store-reference-to-the-result-of-an-operation-in-go
*** Error Handling
**** An introduction to error handling in Go
  + https://golang.org/doc/faq - golang faqs
    + go through "why does Go not have exceptions?"
  + https://en.wikipedia.org/wiki/Exception_handling#Criticism
  + https://en.wikipedia.org/wiki/Communicating_sequential_processes (CSP)
**** Improving your code with Golint
**** Handling Errors & Logging Errors to a File
**** Four Common Ways to Handle Errors
**** Custom Errors - Creating Values of Type error
**** Idiomatic Error Handling
**** Providing Context with Errors
**** Providing Even More Context with Errors
**** Error Handling Review & Resources
*** Farewell
**** Nice Articles
  + http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/  
**** Next Steps
  + https://goo.gl/k5VKHd - great free training
  + https://www.youtube.com/user/toddmcleod/playlists
    + "Build Web Apps with Go Language" - Caleb Doxsey 
    + "Learn HTML-CSS"

** udemy - Web Development w/ Google's Go (golang) Programming Langauge - Todd McLeod
*** Getting started
**** Why choose Go (golang) for web development?
  + Server-side: #1 Go; #2 Node.js; #3 Python; #4 Ruby; #5 PHP
  + Go takes advantage of multiple cores
  + Fast build, Fast execution and Ease of programming
  + Easy concurrency based upon Tony Hoare's CSP
  + Compiled, static type, GC
  + Developed at Google by Rob Pike, Ken Thompson, Robert Griesemer
**** Course prerequisites
  + CLI; github; HTML/CSS; Go Programming
  + Courses (by Todd McLeod)
    + HTML/CSS - How to Create A Website: An HTML Tutorial and CSS Tutorial (udemy)
    + Learn How To Code: Google's Go (golang) Programming Language (udemy)
**** Course resources
  + resources
    + https://docs.google.com/document/d/1jfU8-3qxrWWP9KVxrNPA77KDzRStE6bakqKUzFDJArQ/edit - resources doc
    + forums
      + https://forum.golangbridge.org
      + subscribe to Go on http://stackoverflow.com/
    + github code
      + Go langauge fundamentals
        + https://github.com/GoesToEleven/GolangTraining
      + Go web programming
        + https://github.com/GoesToEleven/golang-web-dev
    + course outline
      + https://docs.google.com/document/d/1QKWp1VYd26uiQZWIR05pahSa0HnbD1qqj9dtIQiVVjU/edit
    + follow me
      + https://twitter.com/Todd_McLeod - twitter
      + https://goo.gl/kWyztP - google+
      + https://www.youtube.com/user/toddmcleod - youtube
    + books
      + go web programming - sau sheong chang
      + introducing go - caleb doxsey
      + an introduction to programming in go - caleb doxsey
        + www.golang-book.com
      + the way to go - ivo balbaert
      + go in action (Intermediate) - william kennedy
      + the go programming language (Advanced) - brian w. kernighan
    + free trainings
      + my lectures
        + youtube playlist
          + https://www.youtube.com/playlist?list=PLSak_q1UXfPpXj-q1BeucvBAlNdotQWVD
        + code base
          + https://github.com/GoesToEleven/golang-web-dev
      +  caleb doxsey's lectures
        + youtube playlist
          + https://www.youtube.com/playlist?list=PLSak_q1UXfPrI6D67NF8ajfeJ6f7MH83S
        + code base
          + https://github.com/golang-book/bootcamp-examples
      + ardan training 
        + Bill kennedy's Ardan lab "ultimate Go" training
          + https://www.ardanlabs.com/ultimate-go
**** Language review
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/001_prereq
  + variables
    + short variables declaration operator
    + using the var keyword to declare a variable
    + scope
  + data structures
    + slice
    + map
    + struct
      + composite literal
  + functions
    + func (receiver) identifier (parameters) (returns) {<code>}
    + methods
  + composition
    + embedded types
    + interfaces
    + polymorphism
    + good article on composite
      + https://www.ardanlabs.com/blog/2015/09/composition-with-go.html
  + % cd work/001_prereq/01; % go fmt; % go run fmt
  + Hands-on exercises
    + https://docs.google.com/document/d/12sT08F4UCQaXdankN9B8pV9GubL04306Ddt-0lQ3nsU/edit
    + https://docs.google.com/document/d/1AqD-5yfAw8P1aUwH6-07UTHc0FSSAnW9b44sXJEVoag/edit
    + use https://play.golang.org/
**** How to succeed
  + focus and commitment - one important characteristic for success (Warren Buffet, Bill Gates)
  + Priorities, Commitment and Focus
    + What is important to you in your life ? Priortize
    + Can you give time everyday to that which is important ? Commitment
    + Give time to the important everyday. Focus
  + drop by drop bucket fills. small continuous efforts pays off 
  + 7 principles of highly effective people - stephen covey
*** Templates
**** Understanding templates
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/002_template
  + A template allows us to create one document and then merge data with it
  + Web templates allow us to server personalized results to users
  + We are learning about templates so that we can create one document, a web
  page and then merge customized data to that page
  + packages: "text/template"; "html/template"
    + https://godoc.org/text/template
    + https://godoc.org/html/template
**** Templating with concatenation
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/003_string-to-html
  + % cd work/003_string-to-html/01_stdout; % go fmt; % go run main.go > index.html
    + open index.html in browser
  + % cd work/003_string-to-html/02_file; % go fmt; % go run main.go
    + open index.html in browser
  + % cd work/003_string-to-html/03_os-Args; % go fmt; % go run main.go Todd
    + open index.html in browser
**** Understanding package text/template: parsing & executing templates
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/004_parse_execute
  + % cd work/004_parse_excute/01_stdout; % go fmt; % go rum main.go > index.html
  + % cd work/004_parse_excute/02_file; % go fmt; % go rum main.go
  + % cd work/004_parse_excute/03_ParseFiles; % go fmt; % go rum main.go
  + % cd work/004_parse_excute/04_ParseGlob; % go fmt; % go rum main.go
  + % cd work/004_parse_excute/05_performant-parsing_func-init; % go fmt; % go rum main.go
**** Passing data into templates
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/005_data
  + % cd work/005_data/01; % go fmt; % go run main.go
**** Variables in templates
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/006_variable
  + % cd work/006_variable/01; % go fmt; % go run main.go
**** Passing composite data structures into templates
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/007_data-structures
  + 'go fmt ./...' - format all code inside directories
  + % cd work/007_data-structures/01_slice/01; % go fmt; % go run main.go
  + % cd work/007_data-structures/01_slice/02_variable; % go fmt; % go run main.go
  + % cd work/007_data-structures/02_map/01; % go fmt; % go run main.go
  + % cd work/007_data-structures/02_map/02_variable; % go fmt; % go run main.go
  + % cd work/007_data-structures/03_struct/01; % go fmt; % go run main.go
  + % cd work/007_data-structures/03_struct/02_variable; % go fmt; % go run main.go
  + % cd work/007_data-structures/04_slice-struct; % go fmt; % go run main.go
  + % cd work/007_data-structures/05_struct-slice-struct/01; % go fmt; % go run main.go
  + % cd work/007_data-structures/05_struct-slice-struct/02_refactored; % go fmt; % go run main.go 
**** Functions in templates
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/008_func\
  + % cd work/008_func/01; % go fmt; % go run main.go
**** Pipelines in templates
  + % cd work/008_func/02_date-formatting; % go fmt; % go run main.go
    + README.md
      + https://github.com/GoesToEleven/golang-web-dev/tree/master/008_func/02_date-formatting
    + godoc.org/time
  + % cd work/008_func/03_pipeline; % go fmt; % go run main.go
  + % cd work/008_func/04_pipeline; % go fmt; % go run main.go
**** Predefined global functions in templates
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/009_predefined-global-functions
  + https://godoc.org/text/template#hdr-Functions
  + % cd work/009_predefined-global-functions/01_index/01; % go fmt; % go run main.go
  + % cd work/009_predefined-global-functions/01_index/02; % go fmt; % go run
  + % cd work/009_predefined-global-functions/02_and; % go fmt; % go run
  + % cd work/009_predefined-global-functions/03_comparison; % go fmt; % go run
**** Nesting templates - modularizing your code
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/010_nested-templates
  + {{/* a comment *./}} - comment in template
  + % cd work/010_nested-templates/01_nested-templates; % go fmt; % go run main.go
  + % cd work/010_nested-templates/02_data-to-template; % go fmt; % go run main.go
  + % cd work/010_nested-templates/03_define-template; % go fmt; % go run main.go > default.html
    + open default.html in browser
    + svg - take "How to Create A Website: And HTML Tutorial and CSS Tutorial"
  + % cd work/010_nested-templates/04_preview; % go fmt; % go run main.go
    + run server
    + open 'localhost:8080' in browser
    + this is preview to what we are going to learn
**** Passing data into templates & composition
  + composition vs inheritance
    + https://en.wikipedia.org/wiki/Composition_over_inheritance
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/011_composition-and-methods
  + Composition with Go
    + https://www.ardanlabs.com/blog/2015/09/composition-with-go.html
  + % cd work/011_composition-and-methods/01; % go fmt; % go run main.go
  + % cd work/011_composition-and-methods/02; % go fmt; % go run main.go
  + % cd work/011_composition-and-methods/03; % go fmt; % go run main.go
**** using methods in templates
  + % cd work/011_composition-and-methods/04_method; % go fmt; % go run main.go
**** hands-on exercies
  + README.md
    + https://github.com/GoesToEleven/golang-web-dev/tree/master/012_hands-on
  + % cd work/012_hands-on/01_hands-on_solution; % go fmt; % go run main.go > index.html
  + % cd work/012_hands-on/03_hands-on_solution/01; % go fmt; % go run main.go > index.html
  + % cd work/012_hands-on/03_hands-on_solution/02; % go fmt; % go run main.go > index.html
  + % cd work/012_hands-on/03_hands-on_solution/03; % go fmt; % go run main.go > index.html
  + % cd work/012_hands-on/05_hands-on_solution/01; % go fmt; % go run main.go > index.html
  + % cd work/012_hands-on/05_hands-on_solution/02; % go fmt; % go run main.go > index.html
  + % cd work/012_hands-on/07_hands-on_solution; % go fmt; % go run main.go > index.html
  + % cd work/012_hands-on/09_hands-on_solution; % go fmt; % go run main.go
    + localhost:8080; open in browser
**** using package html/template, character escaping, & cross-site scripting
  + "html/template" is built on top of "text/template"
  + % cd work/013_xss/01_text-template_no-escaping; % go fmt; % go run main.go > index.html
  + % cd work/013_xss/01_text-template_escaping; % go fmt; % go run main.go > index.html
*** Creating your own server
*** Understanding net/http package
*** Understanding routing
*** Serving files
*** Deploying your site
*** Creating state
*** Creating sessions
*** Amazon Web Services
*** Relational Databases
*** Scaling On AWS
*** Photo Blog
*** Web Dev Toolkit
*** Go & Mongodb
**** organizing code into packages
  + Articles by Steven White
    + https://stevenwhite.com/building-a-rest-service-with-golang-1/
    + https://stevenwhite.com/building-a-rest-service-with-golang-2/
    + https://stevenwhite.com/building-a-rest-service-with-golang-3/
  + HttpRouter is a lightweight high performance HTTP request router for Go
    + https://github.com/julienschmidt/httprouter - github
    + https://godoc.org/github.com/julienschmidt/httprouter - godoc
  + % cd work/042_mongodb/01_julienschmidt-router; % go run main.go; # start server
    + % curl http://localhost:8080
  + % cd work/042_mongodb/02_json; % go run main.go; # start server
    + % curl http://localhost:8080/user/1
**** create user & delete user
  + % cd work/042_mongodb/03_post-delete; % go run main.go; # start server
    + % curl http://localhost:8080/user/1; # GET
    + % curl -X POST -H "Content-Type: application/json" -d '{"Name":"James Bond","Gender":"male","Age":32,"Id":"777"}' http://localhost:8080/user; # POST
      // -X is short for --request Specifies a custom request method to use when communicating with the HTTP server.
      // -H is short for --header
      // -d is short for --data
    + % curl -X DELETE -H "Content-Type: application/json" http://localhost:8080/user/777
**** MVC design pattern - model view controller
  + % cd work/042_mongodb/04_controllers; % go run main.go; # start server
    + % curl http://localhost:8080/user/1; # GET
    + % curl -X POST -H "Content-Type: application/json" -d '{"Name":"James Bond","Gender":"male","Age":32,"Id":"777"}' http://localhost:8080/user; # POST
    + % curl -X DELETE -H "Content-Type: application/json" http://localhost:8080/user/777
**** install mongodb
  + https://www.mongodb.com/download-center?jmp=nav#community - download mongodb
  + https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/?_ga=2.31841150.1178288608.1522942008-838338378.1522942008 - macOS install with brew
    + % brew update
    + % brew install mongodb
      + % brew search mongodb; # search for packages
      + % brew upgrade mongodb; # to upgrade
  + run mongodb
    + % mkdir -p mongodb/data/db_v3.6.3
    + % mongod --dbpath mongodb/data/db_v3.6.3
      + verify that mongodb has started successfully by checking the process output
        + [initandlisten] waiting for connections on port 27017
    + % mongo --host 127.0.0.1:27017; # begin using mongodb
      + 'ctrl + c' to stop mongodb
  + % brew switch go 1.10
  + % go get gopkg.in/mgo.v2; # get mgo packages; mgo is popular mongo driver for go
  + % go get gopkg.in/mgo.v2/bson
**** connect to mongodb
  + % mongod --dbpath mongodb/data/db_v3.6.3
  + % cd work/042_mongodb/05_mongodb/01_update-user-controller; % go run main.go; # start server
    + % curl http://localhost:8080/user/1; # GET
**** crud with go & mongodb
  + % mongod --dbpath mongodb/data/db_v3.6.3; # start mongodb server
  + % cd work/042_mongodb/05_mongodb/05_update-user-controllers-delete; % go fmt main.go
  + % go run main.go; # start server
  + % curl -X POST -H "Content-Type: application/json" -d '{"name":"Miss Moneypenny","gender":"female","age":27}' http://localhost:8080/user; #POST
  + % curl http://localhost:8080/user/<enter-user-id-here>
  + % curl -X DELETE http://localhost:8080/user/<enter-user-id-here>
**** hands on exercise & solution
  + % cd work/042_mongodb/06_hands-on_solution; % go fmt main.go
  + % go run main.go; # start server
  + % curl -X POST -H "Content-Type: application/json" -d '{"name":"Miss Moneypenny","gender":"female","age":27}' http://localhost:8080/user; #POST
  + % curl http://localhost:8080/user/<enter-user-id-here>
  + % curl -X DELETE http://localhost:8080/user/<enter-user-id-here>
**** hands on exercise & solution
  + % cd work/042_mongodb/08_hands-on_solution; % go fmt main.go
  + % go run main.go; # start server
  + % curl -X POST -H "Content-Type: application/json" -d '{"name":"Miss Moneypenny","gender":"female","age":27}' http://localhost:8080/user; #POST
  + % curl http://localhost:8080/user/<enter-user-id-here>
  + % curl -X DELETE http://localhost:8080/user/<enter-user-id-here>
**** hands on exercise & solution
  + % cd work/042_mongodb/10_hands-on_solution; % go fmt main.go
  + % go run main.go; # start server
    + http://localhost:8080; # open in browser
*** Docker
*** PostgreSQL
*** MongoDB
