* Coursera: Ruby On Rails Web Development, John Hopkins University
** course1: ruby on rails - An Introduction
*** Week 1 - Welcome and Setting Up the Development Environment
**** installing software
***** software installation
     + installation of ruby
     + installation of ruby on rails
***** coding editors
     + sublime text
***** recommended books
     + mastering sublime text - dan peleg
     + pro git - scott chacon, ben staub
     + git in practice - mike mcquaid
     + learn git in a month of lunches - rick umali
     + pragmatic guide to git - travis swicegood
***** software installation
     + software
       + ruby (latest) - language interpreter
       + rails 4.2.3 - web application platform and dependencies
       + git (latest)
       + phantomjs (latest) - headless web testing support
       + sublime text 3 - optional text editor
***** install
     + homebrew - missing package manager for OS X
       + brew.sh - weblink
       + % /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
     + rbenv
       + % brew install rbenv ruby-build
       + % echo 'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' >> ~/.bash_profile
     + ruby
       + % rbenv install 2.2.3
       + % rbenv global 2.2.3
       + % ruby -v
     + rails
       + % gem install rails -v 4.2.3 -- --use-system-libraries
       + % rbenv rehash
     + git
       + % git --version
       + % brew install git
     + phantomjs - headless browser
       + brew install phantomjs
     + submlime text 3 - editor
       + link: https://www.sublimetext.com/3
       + download and install	 
     + rspec - unit testing
       + % git install rspec
***** rails application
     + % rails new test_app // rails _4.2.3_ new my_new_app
       + directory
         + app // core app code, including models, views, controllers and helpers
         + app/assets // application assets such as cascading style sheets (css),
                      // javascript files and images
         + bin // binary executable files
         + config // application configuration
         + db // database files
         + doc // documentation for the application
         + lib // library modules
         + lib/assets // library assets such as cascading style sheets(css), javascript files
                      // and images
         + log // application log files
         + public // data accessible to the public (e.g., via web browsers), such as error
                  // pages
         + bin/rails // a program for generating code, opening console sessions or starting a
                     // local server
         + test // application tests
         + tmp // temporary files
         + vendor // third-party code such as plugins and gems
         + vendor/assets // third-party assets such as cascading style sheets (css), javascript
                         // files, and images
         + README.md // a brief description of the application
         + Rakefile // utility tasks avaiable via the rake command
         + Gemfile // gem requirements for this app
         + Gemfile.lock // a list of gems used to ensure that all copies of the app use the same
                        // gem versions
         + config.ru // a configuration file for rake middleware
         + .gitignore // patters for files that should be ignore by git      
     + % cd test_app; % rails server
     + copy http://localhost:3000 into browser
     + % ctrl-c; // quit server
***** ide's & editors
     + rubymine, aptana, vim, sublime text
     + sublime
       + package manager: link: https://packagecontrol.io
**** git and github
     + one .git directory at the top level
     + workflow
       + create repo - empty; clone repo - existing
       + add changes to staging area
       + commit changes (from staging area to local repo)
       + push changes from local to remote
     + link: http://git-scm.com
     + free book http://git-scm.com/book
     + good git reference: http://gitref.org
     + global setup
       + % git config --global user.name "xyz"
       + % git config --global user.email "xyz@gmail.com"
       + % git config user.name
     + % git help <command> // git help subcommand
     + create new repo 
       + % cd working_dir
       + % git init
       + possibly create a .gitignore file
       + % git add // adds entire current dir with subdir
       + % git commit -m "Initial comment"
     + clone an existing repo (ex. from github)
       + % git clone https://repourl.git
	 + many transfer protocols
	   + https, git
     + % git status // current status
     + % git add // add untracked files to be tracked or 
                 // modified tracked file to staging area
       + mods made to the file after "git add" need to be 
	 "git-added" again even if you did not commit yet
     + % git diff // shows the diff between staging and working area
       + % git diff --staged // shows the changes b/w HEAD (latest commit
	 on current branch) and staging directory
       + % git diff HEAD // shows the deltas b/w HEAD and working dir
     + % git commit // commits your changes to the repo, prompts for commit message
       + % git commit -m "your message "
       + % git commit -am "your message " // skipping the staging area
	 // first time you need to do % git add
     + checkout
       + before committing
         + % git checkout . // re-checkout all tracked files overwriting local changes
         + % git checkout -- <file> // re-checkout just one specific file
       + after committing
	 + % git revert HEAD // reverts the most recent commit
     + remote repos
       + % git remote add alias remote_url // link remote repo with your local repo
	 // origin - default alias for a cloned repo
       + % git push alias branch-name // push changes to your branch (master)
     + github // web-based hosting service for software projects that use git
*** Week 2 - Ruby on Rails: An Introduction 
**** getting to know ruby
***** recommended books
      + eloquent ruby - russ olsen
      + programming ruby - dave thomas, andy hunt and chad fowler
      + beginning ruby - peter cooper
      + head first ruby - jay mcgavren
      + learn to program - chris pine
      + ruby cookbook - lucas carlson, leonard richardson
      + the well-grounded rubyist - david a black
      + metaprogramming ruby - paolo perrotta
***** checkout out module 2
      + % git clone https://github.com/jhu-ep-coursera/fullstack-course1-module2.git
***** rspec
      + % gem install rspec // install rspec
      + % rspec --init // create spec directory
*** Week 3
**** core concepts
***** checkout out module 3
      + % git clone https://github.com/jhu-ep-coursera/fullstack-course1-module3.git
***** recommended books
      + agile web development with rails 4 - dave thomas, sam ruby and david heinemeier hansson
      + ruby on rails tutorial - michale hartl
      + rails 4 in action - ryan bigg, yehuda katz, steve klabnik, rebecca skinner
***** creating your first application
      + % rails new my_first_app // create rails app
	+ % rails new -h // more options
      + % cd my_first_app
      + % git init; git add .; git commit -m "Initial commit" // add git repo
      + another terminal // optional terminal
	+ % cd my_first_app
	+ % rails server (or rails s) // % rails server -h for more startup options
***** directory
      + app // controllers, views and models (and helpers). most of our development is here
      + config // configuration files (which DB?)
      + db // files related to your db and migration "scripts"
      + public // static files
      + vendor/Gemfile; vendor/Gemfile.lock // Dependencies managed by Bundler
      + we want to add a completely static web page, we can add it to public page
	+ public/hello_static.html
***** generating a controller
      + % rails generate controller controller_name [action1 action2] // can use g for generate
	// app/controllers/greeter_controller.rb - controller
	// app/views/greeter/hello.html.erb - view
	// erb is templating library (like jsp) that lets you embed Ruby into your HTML
***** router file
      + config/routes.rb
***** rake
      + Ruby mAKE // ruby's build language (no XML, written entirely in Ruby)
	          // to automate app-related tasks: database, running tests etc
      + % rake --tasks // list of rake tasks
	+ % rake --describe task_name 
***** helpers
      + app/helpers/greeter_helper.rb // add helper method
	// rails provides many built-in helpers like "link_to name, path"
***** ruby gems // 3rd party plugins and additions for ruby
      + https://rubygems.org // web link
      + % gem // package manager
	+ % gem -h/--help // gem help
      + % gem install httparty // install httparty
	+ % gem list httparty // check whether httparty is installed or not
	+ % gem list httparty -d // most details on httparty
	  // httparty - restfull web services client
      + https://www.programmableweb.com/apis // lots of restful apis
      + "require pp" // pp - pretty print
***** bundler // provides a consistent environment for ruby projects by tracking and
              // installing the exact gems
      + bundler.io // weblink
      + preferred way to manage gem dependencies 
        // specify dependencies in Gemfile in root of Rails app
      + % bundle install // after specifying a new gem in the gemfile
        + % gem list <gem-name> // exact version of gem
        + % bundle install --without production // to prevent the local installation of any
                                                // production
      + % bundle update // when modifying a version of gem
***** heroku // cloud app platform
      + https://www.heroku.com // link
      + toolbelt.heroku.com // mac installer of heroku cli to manage apps
      + heroku uses Postgres db and recommends rails_12factor gem
        + download and install postgres.app from postgresapp.com
        + % gem install pg -- --with-pg-config=/Applications/Postgres.app/Contents/Versions/latest/bin/pg_config
      + put sqlite gem into development group and "heroku" gems in production
	+ tells bundler and heroku which gems to use
      + % heroku login
      + % heroku create search-coursera-yaraju-jhu
	      // created: https://search-coursera-yaraju-jhu.herokuapp.com/ 
        // git: https://git.heroku.com/search-coursera-yaraju-jhu.git
      + % git remote -v // push app
      + % git push heroku master // pushes master branch to heroku
        + % heroku config:set FOOD2FORK_KEY=0ee47c46b37a2167e7940c3f1dbfb275
      + % heroku open // to open app in browser
***** blackbox testing
      + with RSpec + Capybars ruby gems, you can write very intuitive and expressive tests
      + % gem install capybara; gem install selenium-webdriver
      + % gem install poltergeist
      + % rspec --init
      + % rspec --format documentation // if :selenium uses firefox
	                               // if :poltergeist uses phantomjs (headless browser)
      + % rspec -e rq01 // test only rq 01
      + phantomjs.org // headless web browser
***** debug
      + % heroku logs // gives logs of app
        + fix and git commit
      + % git push heroku master

** course2: ruby on rails - rails with active record and action pack
*** Week 1 - introduction to active record
**** beginning databases in rails
***** some terms
      + scaffolding // quickly generate code to view, delete and update resources
        + Rails uses SQLite db by default
      + migrations // database schema
      + active record // interation with the database data
        + CRUD // create, retrieve, update and delete
      + metaprogramming
        + dynamic methods, ghost methods and dynamic dispatch
***** module git
      + % git clone https://github.com/jhu-ep-coursera/fullstack-course2-module1-fancy_cars.git
***** recommened books
      + ruby on rails framework
        + agile web development with rails 4* - dave thomas, sam ruby and david heinemeier hansson
        + ruby on rails tutorial - michael hartl
        + rails 4 in action* - ryan bigg, yehuda katz, steve klabnik and rebecca skinner
      + ruby language
        + eloquent ruby - russ olen
        + programming ruby* - dave thomas, andy hunt and chad fowler
        + beginning ruby - peter cooper
        + head first ruby* - jay mcgavren
        + learn to program - chris pine
        + ruby cookbook - lucas carlson and leonard richardson
        + the well grounded rubyist - david a black
        + metaprogramming ruby - paolo perrotta
***** scaffolding
      + a code-generator for entities
      + % rails new fancy_cars // creates new app fancy_cars
        % cd fancy_cars/
        % rails g scaffold car make color year:integer // rails generating scaffold code
          + --no-migration // scaffold flag for no migration 
        % rake db:migrate // rake db migrate
          % rails s // start rails server "http://localhost:3000/cars"
                    // json view "http://localhost:3000/cars.json"
***** sqlite
      + rails default uses SQLite for database
      + database setup
        fancy_cars->config->database.yaml // database config
        db/development.sqlite3 // db file
      + % rails db // pops into sqlite console for db viewer
        + sqlite> % .help // usage help
        + sqlite> % .tables // shows created tables
        + sqlite> % .headers on // headers on
        + sqlite> % .mode columns // displays columns
        + sqlite> % select * from cars;
        + sqlite> % .exit // exit from sqlite
      + DB Browser for SQLite // to view db, not really needed
        + https://github.com/sqlitebroswer/sqlitebrowser
***** migrations
      + agility incentive, cross database incentive
      + ruby classes that extend ActiveRecord::Migration
        + file name start with timestamp followed by name // db/migrate/<timestamp_filename>.rb
      + % rake db:migrate // to apply all migrations in db/migrate
        + def up // generate db schema changes
        + def down // undo the changes introduced by the up method
        + change // method when rails can guess how to undo changes
      + % rake db:rollback // undoes the last migration (applies down method)
      + % rails g migration add_price_to_cars 'price:decimal{10,2}' // add column price
      + % rails g migration rename_make_to_company // rename column
        + generates change method, but manually add rename_column
      + http://guides.rubyonrails.org/migrations.html // help on migrations
***** ruby dynamic methods
      + dynamic dispath: classInst.send(method, *args);
      + dynamic method
      + ghost method: missing_method
**** introduction to active record
***** active record
      + % rails c // rails console: irb with rails app loaded
        + % irb> % reload! // reloads model after rake db:migrate
        + class methods deal with the table as a whole, while instance
          methods deal with a particular row of the table
      + % rails g model person first_name last_name // model has its own generator which can also generate migration
      + config/initializers/inflections.rb // specify inflections
        + config/initializers // initializers
      + active record
        + class name singular
        + DB table plural
        + need to have id primary key
***** active record CRUD
      + CRUD - Create, Retrieve, Update and Delete
      + create
        + p1 = Person.new; p1.first_name="Joe"; p1.last_name="Smith"; p1.save
        + p2 = Person.new(first_name: "John", last_name: "Doe"); p2.save
        + p3 = Person.create(first_name: "Jane", last_name: "Doe")
      + retrieve
        + find(id) or find(id1, id2)
        + first, last, take, all
          + % Person.take; % Person.take 2;
          + % Person.first; % Person.all.first;
          + % Person.all.map { |person| person.first_name }; % Person.pluck(:first_name)
        + order(:column) or order(column: :desc)
          + Person.all.order(first_name: :desc)
        + pluck
        + where (hash) // returns ActiveRecord::Relation
          + % Person.where(last_name: "Doe"); % Person.where(last_name: "Doe")[0]; 
          + % Person.where(last_name: "Doe").pluck(:first_name);
        + find_by (conditions_hash)/ find_by! (conditions_hash) // single return or nill
          + % Person.find_by(last_name: "Doe"); % Person.find_by(last_name: "Nosuchdude");
          + % Person.find_by!(last_name: "Incognito");
        + limit (n) // how many records come back
          + % Person.count; % Person.all.map { |person| "#{person.first_name} #{person.last_name}" };
          + % Person.offset(1).limit(1).map { |person| "#{person.first_name} #{person.last_name}" };
          + % Person.offset(1).limit(1).all.map { |person| "#{person.first_name} #{person.last_name} " }
        + offset (n) // don't start from beginning
      + update // modify and save
        + update
          + % jane = Person.find_by first_name: "Jane"; jane.last_name = "Smithie"; jane.save;
          + % Person.find_by(last_name: "Smith").update(last_name: "Smithson")
        + update_all // batch updates
      + delete
        + destroy(id) or destroy // removes a particular instance from DB
          + http://guides.rubyonrails.org/active_record_callbacks.html // callbacks
          + jane = Person.find_by(first_name: "Jane"); % jane.destroy
        + delete(id) // removes the row from DB
          + joe = Person.find_by first_name: "Joe"; % Person.delete(joe.id);
        + delete(all) // careful
*** Week 2 - deep dive into active record
**** advanced querying
     + advanced querying
       + sql fragments; dangers of sql injection; array syntax; hash syntax
     + database relationships
       + one-to-one; one-to-many; many-to-many; rich many-to-many
     + more active record
       + validations; transactions; N+1 queries
     + git repository
       + link : https://github.com/jhu-ep-coursera/fullstack-course2-module2-advanced-ar
     + books
       + agile web development with rails 4 - Dave Thomas, Sam Ruby and David Heinemeier Hansson
       + ruby on rails tutorial - Michael Hartl
       + Rails 4 in action - Ryan Bigg, Yehuda Katz, Steve Klabnik, Rebecca Skinner
       + Eloquent Ruby - Russ Olsen
       + Programming Ruby - Dave Thomas, Andy Hunt and Chad Fowler
       + Beginning Ruby - Peter Cooper
       + Head First Ruby - Jay McGavren
       + Learn To Program - Chris Pine
       + Ruby Cookbook - Lucas Carlson, Leonard Richardson
       + The Well Grounded Rubyist - David A Black
       + Metaprogramming Ruby - Paolo Perrotta
     + seeding the database
       + % rails _4.2.3_ new advanced_ar ; % cd advanced_ar
       + % rails g model person first_name age:integer last_name
       + % rake db:migrate
       + db/seeds.rb // to populate development data
         + add entries to db/seeds.rb
       + % rake db:seed // rake --describe db:seed
         + % rails db
         + >> .headers on
         + >> .mode columns
         + >> select * from people;
     + sql fragments and dangers of sql injection
       + % Person.where("age BETWEEN 30 and 33").to_a
       + % Person.find_by("first_name LIKE 'Xman'")
       + sql injection dangers
         + maninpulating raw sql to hack into a database
         + includes maliciously dropping/deleting tables or
           gaining acces to confidential info
         + link: https://en.wikipedia.org/wiki/SQL_injection
         + quick demo
           + % rails g migration add_login_pass_to_people login pass // add login and pass fields
           + % rake db:migrate
           + % rails c
             + % login = "john2"; pass = "no_idea"
             + % Person.where("login = '#{login}' AND pass = '#{pass}'")
             + % pass = "got you" OR "x" = "x" // can fetch all users by hacker
             + % Person.where("login = '#{login}' AND pass = '#{pass}'")
         + array and hash parameters to avoid SQL injection
       + array and hash condition syntax
         + two alternatives to directly specifying sql literals
           + array condition syntax
             + lets you specify SQL fragment with ? followed by values(parameters)
             + automagically performs conversions on the input values and escapes strings
               in the sql
             + immune to sql injection
             + similar in java via PreparedStatement in Java
             + % rails c
               % Person.where("age BETWEEN ? and ?", 28, 34).to_a
               % Person.where("first_name LIKE ? OR last_name LIKE ?", '%J%, '%J').to_a
             + but tehre are two small problems
               + keep track of the order of parameters hiding behind the "?"
               + if you have n "?" - you need to pass in n values, even if they are
                 a reference to the same value
           + hash condition syntax
             + instead of "?", you specify symbols which map to the values in the hash
               passed in as a second parameter
             + % Person.where("age BETWEEN :min_age AND :max_age", min_age: 28, max_age: 32).to_a
             + % Person.where("first_name LIKE :pattern OR last_name LIKE :pattern", pattern: '%J%').to_a
             + hash syntax seems more intuitive to most people
**** expressing database relationships
     + one-to-one association
       + relational aspect of RDBMS
       + one-to-one association/relation
         + one person has exactly one person_info entry
         + one person_info entry belongs to exactly one person
         + the "belongs to" side is the one with a foreign key (primary key of other table)
           + default name for the for the foreign key is {master_table_singular}_id e.g. person_id
         + % rails g model personal_info height:float weight:float person:references
           // model pointing to existing model person
         + % rake db:migrate
         + % rails db; % .schema personal_infos
         + % rails c
           % bill = Person.find_by first_name: "Bill"
           % pi1 = PersonInfo.create height: 6.5, weight: 220
           % bill.personal_info = pi1
           + build_personal_info(hash)
             + doesn't creates a record in DB
             + removes the previous reference in DB
           + create_personal_info(hash)
             + creates a record in DB
             + removes the previous reference in DB
           + % bill = Person.find_by last_name: "Gates"
             % bill.personal_info
             % bill.build_personal_info height: 6.0, weight: 180
             % bill.save
             % josh = Person.find_by first_name: "Josh"; 
             % josh.create_personal_info height: 5.5, weight: 135
         + % rails db
           % .headers on
           % .mode columns
           % select * from personal_infos;
           % select * from people;
         + has_one/belongs_to (and integer column in DB) is all you need to
           establish a one-to-one association           
     + one-to-many association
       + one person has one or more jobs
       + one job entry belongs to exactly one person
       + the "belongs to" side is the one with a foreign key
         + default name for the foreign key is {master_table_singular}_id, e.g. person_id
       + % rails g model job title company position_id person:references
       + % rake db:migrate
       + % rails c
         % ActiveRecord::Base.logger = nil // reduce logs
         % Job.create company: "MS", title: "Developer", position_id: "#1234"
         % p1 = Person.first
         % p1.jobs
         % p1.jobs << Job.first // jobs are appended
         % Job.first.person // first job of a person
       + % person.jobs = jobs // replaces existing jobs with a new array
       + % person.jobs.clear // disassociates jobs from this person by setting the
                             // foreign key to NULL
       + create and where methods for jobs become scoped to the person!
       + edit seed.rb Person.first.jobs.create! and Person.last.jobs.create!
         + options for has_many - :class_name
         + % Person.first.may_jobs
       + % rake db:seed
       + % rails c
         % ActiveRecord::Base.logger = nil
         % Person.first.jobs.where(company: "MS").count
         % Person.last.jobs.where(company: "MS").count
         % Person.last.jobs.where(company: "MS").to_a
       + :dependent
         + has_many, has_one and belongs_to support :dependent option which lets you
           specify the fate of the association when the parent gets destroyed
         + :delete - remove associated objects
         + :destroy - same as above, but remove the association by calling destroy on it
         + :nullify - set the FK to NULL and leave associated entity alone
         + edit person.rb for has_one dependent
           + % mike = Person.find_by first_name: "Michael"
             % mike.personal_info
             % mike.destroy
             % PersonalInfo.find 13 // active record not found
     + many-to-many association
       + one person can have many hobbies
       + one hobby can be shared by many people
       + habtm (has_and_belongs_to_many)
       + need to create an extra (a.k.a. join) table (without a model, i.e. just a migration)
         + no need of a ruby model, can be in the db
         + plural model names separated by an underscore in alphabetical order
           // Hobbies and Hobbies_People
       + % rails g model hobby name
         // person and hobby model will not have references
       + % rails g migration create_hobbies_people person:references hobby:references
       + % rake db:migrate
       + % rails db
         % .schema %hobbies%
       + edit person.rb and hobby.rb for has_and_belongs_to_many
       + % josh = Person.find_by first_name: "John"
         % lebron = Person.find_by first_name: "LeBron"
         % programming = Hobby.create name: "Programming"
         % josh.hobbies << programming; lebron.hobbies << programming
         % programming.people
       + join table needs to only exist in the DB, but not in Ruby code
       + many-to-may contains 2 models and 3 migrations
     + rich many-to-many association
       + sometimes, you need to keep some data on the join table or you
         need to store grandchild relations on a model,
         like user -> articles -> comments
       + in our case - all salary ranges for a particular person
       + ActiveRecord provides a :through option for this purpose
         + you first create a regular parent-child relation and then
           use the child model as a "join" between the parent and
           grandchild
       + % rails g model salary_range min_salary:float max_salary:float job:references
         % rake db:migrate
       + edit job.rb and person.rb
       + % rails c
         % lebron = Person.find_by(first_name: "LeBron")
         % lebron.jobs.count
         % lebron.jobs.pluck(:id)
         % Job.find(12).create_salary_range(min_salary: 10000.00, max_salary: 20000.00)
         % Job.find(13).create_salary_range(min_salary: 15000.00, max_salary: 35000.00)
         % lebron.approx_salaries
       + add max_salary method to person.rb
         + average, minimum and sum also available
           + link: http://api.rubyonrails.org/classes/ActiveRecord/Calculations.html
       + % lebron = Person.find_by last_name: "James"
         % lebron.max_salary
**** more active record
     + active record scopes
       + default scope
         + class "method" for specifying how the records are retrieved by default from
           the database (instead of relying on the database default)
           + % Hobby.pluck :name
         + use unscoped to break out of default
           + edit hobby.rb for default_scope { order :name }
           + % Hobby.pluck :name
           + % Hobby.unscoped.pluck :name
       + named scope
         + scope :name, lambda
         + % Person.ordered_by_age.pluck :age
           % Person.ordered_by_age.starts_with("Jo").pluck :age, :first_name
           % Person.ordered_by_age.limit(2).starts_with("Jo").pluck :age, :first_name
       + scopes always return ActiveRecord::Relation
       + can make your ActiveRecord queries very expressive
     + validations
       + active record validations
         + you would like to have some control over what goes into the database
         + not every input might be appropriate
         + if these validations fail - your info should not be saved to the database
         + active record provides a lot of built-in validations
           + presence :true // field contains some data
           + uniqueness: true // make sure no record exists in the database already
         + edit job.rb for validates
         + % rails c
           % job = Job.new
           % job.errors
           % job.save
           % job.errors
           % job.errors.full_messages
         + :numbericality - validates numeric input
           :length - validates value is a certain length
           :format - validates value complies with some regular expression format
           :inclusion - validates value is inside specified range
           :exclusion - validates value is out of the specified range
       + writing custom validations
         + write a method that does some validation and calls errors.add(columnname, error) when
           it encounters an error condition
         + specify it as a symbol for the validate method
         + edit salary_range.rb for validate :min_is_less_than_max
         + % sr = SalaryRange.create min_salary: 30000.00, max_salary: 10000.00
           % sr.errors
           % sr.errors.full_messages
           % sr.save!
       + links
         + http://guides.rubyonrails.org/active_record_basics.html
         + http://guides.rubyonrails.org/active_record_querying.html
         + http://guides.rubyonrails.org/association_basics.html
         + http://guides.rubyonrails.org/active_record_callbacks.html
     + N+1 Queries issue and DB Transactions
       + % rails c
         % Person.first.personal_info.weight
         % Person.all.each { |p| puts p.personal_info.weight } // has N+1 problem does N+1 queries
         % Person.includes(:personal_info).all.each { |p| puts personal_info.weight } // only 2 queries
       + Active Record Transactions
         + every thing you do with Active Record happens through transactions

**** assignment
     + download bootstrap file
       Link: https://drive.google.com/file/d/0Bwvt4e6DQqn4XzAzQVJLSFlSeXM/view?usp=sharing
     + intructions: https://drive.google.com/open?id=0Bwvt4e6DQqn4MlB3bXE3blpicjQ
     + % rails _4.2.3_ new todolists
       + add "group :test do gem 'rspec-rails', '~>3.0' end" to Gemfile
       % rails generate rspec:install
       + add "--format documentation" to .rspec
       + copy Gemfile, spec/assignment_spec.rb 
       % bundle install
       % rspec // to run test suite
       % rspec -e rq01 // to evaluate rq01 requirement
       % rspec -e rq02
       % rails generate model User username:string password_digest:string
       % rake db:migrate
       % rspec -e rq02
       % rails generate model Profile gender:string birth_year:integer first_name:string last_name:string user:references
       % edit user.rb for "has_one :profile" to Profile
       % rake db:migrate
       % rspec -e rq03
       % rails generate model TodoList list_name:string list_due_date:date
       % rake db:migrate
       % rspec -e rq04
       % rails g migration AddUserToTodoList user:references
          // % rails destroy migration AddUserTodoList; to remove generated migration file
       % edit user.rb for "has_one :todo_list" and todo_list.rb for "belongs_to :user"
       % rake db:migrate
       % rspec -e rq05
       % rails g model TodoItem due_date:date title:string description:text completed:boolean todo_list:references
       % edit migration create_todo_items.rb to mention boolean type :default => false
       % edit model todo_list.rb for "has_many :todo_item, dependent: :destroy"
       % rake db:migrate
       % rspec -e rq06
       % rake db:migrate
       % rspec -e rq07
       % edit user.rb for "has_many :todo_items, through: :todo_lists
       % rspec -e rq08
       % add items to db/seeds.rb as specified
       % rake --describe db:seed
       % rspec -e rq09
       % add "default_scope { order :list_due_date }" to todo_list.rb
       % add "default_scope { order :due_date }" to todo_item.rb
       % rspec -e rq10
       % add validates to profile.rb and user.rb

*** Week 3 - introduction to active pack
**** action pack
     + action pack: enables to expose data to web
     + restful principles: index, show and destroy, new and create, edit and update
     + action view
       + to enable you to store data in the database via web, we need forms
       + forms are mechanisms of how you input the data on the web and then store
         the data in the database via action pack
       + form helpers
       + layouts
         + rails application lets you have different layouts for different kinds of
           controllers of a whole application as a whole
       + partials
         + pieces of code that you can reuse in parts between different actions in your
           action pack code
     + % git clone  https://github.com/jhu-ep-coursera/fullstack-course2-module3-blogposts
     + module 3 pdf: https://github.com/jhu-ep-coursera/fullstack-course2-module3-blogposts/tree/master/Lectures
     + books
       + agile web development with rails 4 - Dave Thomas, Sam Ruby and David Heinemeier Hansson
       + ruby on rails tutorial - Michael Hartl
       + Rails 4 in action - Ryan Bigg, Yehuda Katz, Steve Klabnik, Rebecca Skinner
       + Eloquent Ruby - Russ Olsen
       + Programming Ruby - Dave Thomas, Andy Hunt and Chad Fowler
       + Beginning Ruby - Peter Cooper
       + Head First Ruby - Jay McGavren
       + Learn To Program - Chris Pine
       + Ruby Cookbook - Lucas Carlson, Leonard Richardson
       + The Well Grounded Rubyist - David A Black
       + Metaprogramming Ruby - Paolo Perrotta
     + Action Pack = ActionController + Action View
       + % rails _4.2.3_ new my_blog
       + % rails g scaffold post title content:text
       + % rake db:migrate
       + scaffolding creates:
         + migration
         + model
         + routes
         + restful controller
         + views
       + actionview: erb
         + html file with an .erb extension
         + erb is a templating library (similar to jsp) that lets you embed ruby into your html
         + two tag patters
           + <% ...ruby code... %> - evaluate ruby code
           + <%= ...ruby code... %> - output evaluated ruby code
         + they are many view helpers that assist in code creation, link link_to ...
       + action controller
         + ruby class containing one or more actions
         + each action is responsible for responding to a request to perform some task
         + when an action is finished firing it renders a view with the same name as the
           action
         + the action always needs to be mapped in routes.rb // config/routes.rb
       + action pack is controller and view work together to let you interact with
         resources in the model layer
       + rest and rails
         + REpresentational State Transfer
         + Roy T. Fielding's Ph.D. dissertation
         + http://www.xfront.com/REST-Web-Services.html
         + REST is all about resources // app/controllers/posts_controller.rb
           + List available resources
           + Show a specific resource
           + Destroy an existing resource
           + Provide a way to create a new resource (like a html form)
           + Create a new resource
           + Provide a way to update an existing resource (like a html form)
           + Update an existing resource
         + named routes from 'Resources :Posts'
           + HTTP Method  : Named Routes   : Parameters  : Controller Action  : Purpose
             GET            posts_path                     Index                List all
             GET            post_path        ID            show                 show one
             GET            new_post_path                  new                  provide form to input new post
             POST           posts_path       Record hash   create               create new record(in DB)
             GET            edit_post_path   ID            edit                 provide form to edit post
             PUT/PATCH      post_path        ID and Record update               update record(in DB)
                                             hash 
             DELETE         post_path        ID            destroy              remove record
         + % rake routes // to view routes
**** restful actions
     + index
       + retrieve all posts
       + look for app/views/posts/xindex.html.erb template to render response
       + edit views/posts/index.json.jbuilder to invoke json or html view // jbuilder : https://github.com/rails/jbuilder
     + show and destroy
       + retrieve specific post based on id parameter
       + show.html.erb template to render response
       + respond_to : rails helper that specifies how to respond to a request based on a request format
         + takes an optional block where the argument is the format (eg: html, json, xml etc.)
         + block specifies how to handle each format
           + format.format_name - matching template
           + format.format_name
             { do_something_other_than_just_displaying_the_matching_template }
       + redirect_to : instead of rendering a template - send a response to the browser
         + usually takes full URL as a parameter
         + could either be a regular URL or a named route
         + if the parameter is an object - rails will attempt to generate a URL for that object
       + destroy
         + redirect instead of render is done because when you want the client to be able to bookmark
           a certain page or you don't have a specific template to show (destroy action) and instead want
           the client to go to a generic page (index)
     + new and create
       + new: create a new empty post object
         + new.html.erb
           + render 'form' -> form is a partial
       + create: create a new post object with parameters that were passed from the new form
         + try to save the object to the database
         + if successful, redirect to show template
         + if unsuccessful (due validation unsuccesfull), render new action (template - again)
     + strong parameters and flash
       + strong parameters
         + link: guides.rubyonrails.org/action_controller_overview.html#stron-parameters
         + post_params method to sanitizes params
       + flash
         + we want to redirect a user to a different page on our site, but at the same
           time give him some sort of message
         + a hash where the data you put in persists for exactly ONE request AFTER the current
           request
         + flash[:attribute] = true; common are :notice (good) and :alert (bad)
           + redirect_to takes a :notice or :alert
     + edit and update
       + edit
         + retrieve a post object based on the id
         + edit.html.erb
       + update
         + retrieve an existing post using id parameter
         + update post object with (strong) parameters that were passed from the edit form
         + try to save the object to the database
         + if successful, redirect to show template
         + if unsuccessful, render edit action (template) again
**** action view
     + partials
       + DRY - Don't Repeat Yourself
       + application.html.erb which enables you to maintain layout code for the entire application
         in one place
       + it would also be nice to reuse snippets of view code in multiple templates
       + for eg: edit and new forms are they really that different
       + partials are similar to regular templates, but they have a more refined set of capabilities
       + named with underscore (_) as the leading character
       + rendered with render 'partialname' (no underscore)
       + render method also accepts a second argument, a has of local variables used in the partial
       + object partial
         + similar to passing local variables, you can also render a specific object
         + <%= render @post %> will render a partial in app/views/posts/_post.html.erb and 
           automatically assign a local variable post (convention over configuration)
         + rendering collection of partials
           <%= render @posts %> is equivalent to
           <% @posts.each do |post| %>
             <%= render post %>
           <% end %>
     + form helpers and layouts
       + form helpers
         + _form.html.erb -> form_for() is helper
         + form_for
           + generates a form tag for passed in object
           + unlike a regular HTML form, Rails uses POST by default
           + as your password is not passed as part of your URL
           + anything that will end up modifying data on the server should
             definitely be a POST and not GET
           + f.label
             + outputs HTML label tage for the provided attribute
             + to customize label description, pass in a string as a second parameter
             + <div class="field">
                 <%= f.label :title, "Heading" %><br>
                 <%= f.text_field :title %>
               </div>
           + f.text_field
             + generates input type="text" field
             + use :placeholder hash entry to specify a placeholder (hint) to be displayed
               inside the field until the user provides a value
             + <div class="field">
                 <%= f.label :title, "Heading" %><br>
                 <%= f.text_field :title, placeholder: "Have a great title?" %>
               </div>
           + f.text_area
             + similar to f.text_field but for a text area instead of a text field input (default: 40c x 40r)
             + can specify a different size (colsxrows) with a :size attribute
             + <div class = "field">
               <%= f.label :content %><br>
               <%= f.text_area :content, size: "10x3" %>
               </div>
           + f.date_select
             + set of select tags (year, month, day) pre-selected for accessing an attribute in the DB. many
               formatting options f.time_select
             + f.datetime_select
             + distance_of_time_in_words_to_now
           + for more
             + ActionView::Helpers::DataHelper docs
               + link: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html
           + other form helpers (not frequenlty used)
             + search_field
             + telephone_field
             + url_field
             + email_field
             + number_field
             + range_field
             + some of these are browser dependent
           + f.submit
             + submit button
             + accepts the name of the submit button as its first argument
             + if you don't provide a name - generates one based on the model and type of action
               e.g. "Create Post" or "Update Post"
             + http://guides.rubyonrails.org/form_helpers.html
       + layouts
         + application.html.erb is applied by default as a shell for any view template
         + layout that matches the name of a controller is applied if present
         + you can use layout method inside controller (outside any action) to set a layout
           for the entire controller
           + layout 'some_layout'
         + you can include a layout for a specific action with an explicit call to render inside
           the action
           + render layout: 'my_layout'
           + if you don't want a layout - just pass false instead of layout name 
             + render layout: false
**** assignment
     + instructions: https://drive.google.com/open?id=0BxOTj_EJTdDGMDd3MTkxMkthOW8
     + bootstrap files: https://drive.google.com/file/d/0Bwvt4e6DQqn4aXNkZlpSc2R6VnM/view?usp=sharing
     + grader requires rails 4.2.8 since ruby 2.4 and rails 4.2.4 have compatibility issues
       + % gem install rails --version=4.2.8
       + % brew install rbenv ruby-build
         % echo 'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' >> ~/.bash_profile
         % source ~/.bash_profile
         % rbenv install 2.4.0
         % rbenv global 2.4.0
         % ruby -v
     + % rails _4.2.3_ new todolists
     + add to Gemfile
       group :test do
         gem 'rspec-rails', '~> 3.0'
         gem 'capybara'
       end
     + add "--format documentation" to .rspec
     + % bundle 
     + % rails generate rspec:install
     + overwise Gemfile, db/seed.rb, spec/features/module3_action_pack_spec.rb from bootstrap file
     + % bundle
     + % rspec // run all requirements
       + % rspec -e rq01 // run specific requirements
       + % rails g scaffold TodoItem due_date:date title:string description:text completed:boolean
           + % rails destroy scaffold TodoItem
       + % rake db:migrate
           + % rake db:rollback
       + % rspec -e rq02 
       + % rake db:seed
       + % rspec -e rq03
       + % rails s // in another terminal
       + % rspec -e rq04
       + "create a new TodoItem (any data)"
       + % rspec -e rq05
       + % rake routes
       + edit create in todo_item_controller to redirect to action: :index and 
         change :notice to flash[:notice]
       + % rspec -e rq06
       + remove edit line in index.html.erb
       + % rspec -e rq07
       + check @todo_item.persisted? to view completed property in _form.html.erb
       + % rspec -e rq08
       + add count method in todo controller and call the instance variable in index view page
       + % rspec -e rq09
*** Week 4 - security and nested resources in action pack
**** nested resources
     + nested resources
       + when one resource dependent on another resources
     + security
       + authentication
         + protects the website that you're trying to access
           and enables authentication
         + how we authorize the person to be able to only view
           his/her own resources, not everybody else's resources
       + http sessions and cookies
         + a sequence of requests and responses between a browser and
           a server
     + pagination
       + when you have many records that you want to access at different
         times, so you paginate between multiple records at a time
     + github link: https://github.com/jhu-ep-coursera/fullstack-course2-module4-i-reviewed
       + % git clone https://github.com/jhu-ep-coursera/fullstack-course2-module4-i-reviewed.git // to clone
     + building app with multiple resources
       + write an app that lets a user make notes about the books he/she read
       + % rails _4.2.3_ new i_reviewed; % cd i_reviewed
       + three tables
         + reviewers: name, password_digest
         + books: name, author, reviewer_id
         + notes: title, note, book_id
       + % rails g model reviewer name password_digest -q // "-q" quiet; don't display info
       + % rails g model book name author reviewer:references -q
       + % rails g model note title note:text book:references -q
       + % rails db:migrate
       + specify associations in the models
         + add "has_many :books" to app/model/reviewer.rb
         + add "has_many :notes, dependent: :destroy" to app/model/book.rb
       + seeding with some data
         + db/seeds.rb
       + % rake db:seed
         + % rails db
           sqlite> .headers on
           sqlite> .mode columns
           sqlite> select * from books;
           sqlite> .exit
       + % rails g scaffold_controller book name author // already have book model but generate controller
         + generally, people generate models and then scaffold_controller
       + add below to config/routes.rb
         resources :books
         root to: "books#index"
       + % rails s // separate terminal
         + http://localhost:3000
       + pull " <p id="notice"><%= notice %></p> " from app/views/index.html.erb to app/views/layouts/application.html.erb
         + will be displayed on every page of application
         + flash keys - :notice, :alert
       + notes resoureces
         + we can scaffold a regular RESTful controller for notes as well, but
         + notes resource depends on the book resource
         + in other words, when do'g anything with the notes resources, we have to
           be talking about a specific book for it to be meaningful
         + rails calls such secondary resources "Nested Resources"
       + % rails g controller notes // no actions specified during creation
       + add below in config/routes.rb // nest notes inside books; notes always have book id
         resources :books do
           resources :notes
         end
       + % rake routes // to see routes
         

       

**** security
**** enhancements and deployment
** course3: ruby on rails - ruby on rails web services and integration with mongodb
*** Week 1 - introduction to mongodb, mongodb-api and crud
**** introduction to nosql and mongodb
***** module git
      + git clone https://github.com/jhu-ep-coursera/fullstack-course3-module1.git // lecture slides
      + git clone https://github.com/jhu-ep-coursera/fullstack-course3-module1-zips.git // git hub repo for module 1
***** popular NoSQL db's
      + mongodb, redis, amazondynamodb, apache hbase, couchbase, memcache, couchdb, cassandra
      + NoSQL db used at twitter, facebook, linkedin and digg
      + categories of nosql
        + key/value based - dynamo, redis, memcached
        + document based of tagged elements - mongodb, couchdb
        + column based - cassandra, hbase
        + graph based - neo4j
        + joins are not supported - embedded doc or link to doc
        + ACID transaction only supported at document level
      + mongdodb
        + created by 10gen (termed from humongous)
        + open source, document oriented
        + storage: JSON like
        + well suited for object oriented programming
      + ruby on rails & mongo
        + http://docs.mongodb.org/ecosystem/tutorial/ruby-driver-tutorial/ - ruby driver
        + http://docs.mongodb.org/ecosystem/tutorial/ruby-mongoid-tutorial/ - mongoid
      + mongodb users
        + metlife, sap, expedia, disney, sourceforge, forbes, firebase, foursquare, doodle
          adp, craigslist, collegehumor, bit.ly, theguardian
      + mongodb installation
        + % brew install mongodb // install mongodb using brew
        + http://www.mongodb.org/downloads - installation downloads
        + journaling in mongodb - allocates 3GB upfront
          + for casual development, turn off // not recommended
            + setting "nojournal=true" in mongod.conf
              + % mongod --config /Users/yaraju/homebrew/etc/mongod.conf
          + do not turn off journaling in production system
      + starting mongodb
        + % mongod -dbpath /Users/yaraju/Aneel/mongodb/data/db // start mongodb
        + % mongo // mongo shell
      + mongo basics
        + download sample zips.json // media.mongodb.org/zips.json
        + % mongoimport --db test --collection zips --drop --file zips.json
        + % mongo // mongo shell
        + % use test // switch to test database
        + % db.zips.findOne() // returns single document
        + gem updates
          % gem update
          % gem install mongo
          % gem install bson_ext
        + require mongo // to use mongo gem in ruby
        + ruby irb
          + % require 'mongo'
            % Mongo::Logger.logger.level = ::Logger::INFO
              % Mongo::Logger.logger.level = ::Logger::DEBUG // logger level debug
            % db = Mongo::Client.new('mongodb://localhost:27017')
            % db = db.use('test')
            % db.database.name
            % db.database.collection_names
            % db[:zips].find.first
              % system('ls') // ruby system command
***** CRUD
      + "C" - create
        + insert_one - insert one document to collection
          + % db[:zips].insert_one(:_id => "100", :city => "city01", :loc => [-76, 39], :pop => 4678, :state => "MD")
          + % db[:zips].find(:city => "city01").count // to test above query
          + % db[:zips].find(:city => "city01").to_a // dispaly in array
        + insert_many - insert multiple document to collection
          + % db[:zips].insert_many([{ :_id => "200", :city => "city02", :loc => [-74.06, 37.56], :pop => 2002, :state => "CA"},
                                     { :_id => "201", :city => "city03", :loc => [-75.06, 35.56], :pop => 3003, :state => "CA"}])
        + _id field
          + primary field
          + default fault for BSON object
      + "R" - Read
        + "find" command
          + % db[:zips].find(:city => "BALTIMORE")
          + % db[:zips].find(:city => "BALTIMORE").first
          + % db[:zips].find.distinct(:state)
          + % db[:zips].find(:city => "GERMANTOWN").count
          + % pp db[:zips].find(:city => "GERMANTOWN", :state => "NY").first
          + % db[:zips].find().each { |r| puts r } // print all
          + % db[:zips].find().each { |r| pp r } // print pp
          + % db[:zips].find({:state => "MD"}).projection(state:true).first // prints _id (default) and state
          + % db[:zips].find({:state => "MD"}).projection(state:true, _id:false).first // prints only state
       + paging
         + db[:zips].find.limit(3).each { |r| pp r } // first 3 documents
         + db[:zips].find.skip(3).limit(3).each { |r| pp r } // skip 3 and next 3 documents
       + sort
         + db[:zips].find.limit(3).sort({:city => 1}).each { |r| pp r } // sort in assending order
         + db[:zips].find.limit(3).sort({:city => -1}).each { |r| pp r } // sort in descending order
       + find by criteria
         + db[:zips].find(:city => {:$lt => 'D'}).limit(2).to_a.each { |r| pp r } // city < 'D'
         + db[:zips].find(:city => {:$lt => 'P', :$gt => 'B'}).limit(3).to_a.each { |r| pp r };nill 
           // cith < 'P' and > 'B' and to stop trailing print
         + db[:zips].find(:city => {:$regex => 'x'}).limit(5).each { |r| pp r } // city with regex 'x'
         + db[:zips].find(:city => {:$regex => 'x$'}).limit(5).each { |r| pp r } // city that end with 'x'
         + db[:zips].find(:city => {:$regex => '^[A-E]'}).limit(5).each { |r| pp r } // city that with A to E
         + db[:zips].find(:city => {:$exists => true}).projection({:_id => false}).limit(3).to_a.each {|r| pp r} // if city field exists
         + db[:zips].find(:pop => {'$not' => {'$gt' => 9500}}).projection({_id:false}).limit(20).to_a.each {|r| pp r} // logical not
         + db[:zips].find({:state=> {'$type' => 2}}).first // value of the field is a instance of specified numeric BSON type
           // '2' is BSON type of string
           // double:1; string:2; object:3; array:4; binary data:5; undefined:6; object id:7; boolean:8
       + replace, update and delete
         + 




        
*** Week 2 - aggregation framework, performance and advanced mongodb
*** Week 3 - mongoid
*** Week 4 - web services
** course4: ruby on rails - html, css and javascript for web developers
*** Week 1 - Introduction to HTML5
**** Welcome to HTML, CSS and Javascript for Web Developers
***** recommended books
      + web design with HTML, CSS, JavaScript and jQuery Set - Jon Duckett *
      + html and css: design and build websites - Jon Duckett
      + learning web design: a beginner's guide to html, 
        css, javascript and web graphics - jennifer niederst robbins
      + learning web app development - semmy purewal
      + mastering sublime text - dan peleg
      + pragmetic guide to git - travis swicegood *
      + pro git - scott chacon and ben straub
      + javascript: the definitive guide: acive your web pages - david flanagan
      + javascript: the good parts - douglas crockford
      + javascript and jquery: interactive front-end web development - jon duckett
**** Development Environment Setup
***** install
      + sublime 3 - https://www.sublimetext.com/3
      + git - https://git-scm.com/downloads
      + node.js - https://nodejs.org/en/download
      + browser sync - https://www.browsersync.io
        % sudo npm install -g browser-sync
        + read document on browser sync
***** test site
      + test site
        % create <html_dir>/html_file 
        % cd <html_dir>
        % browser-sync start --server --directory --files "*"
      + git
        + read first 3 chapters chapter in git book - https://git-scm.com/book/en/v2
      + github.com
        + create new repository coursera-test
        + goto settings->GitHub Pages->Launch automatic page generator
          + https://aneelraju.github.io/coursera-test/
        % git clone https://github.com/aneelraju/coursera-test.git - checkout locally
        % git checkout gh-pages
        % mkdir site; % cd site; create sample index.html
        % cd ..; % git commit -m "My First Page."
        % git push
***** ask for help
      + stackoverflow.com
      + https://jsfiddle.net - write and test html/css/js code online
        + on save, you will get url, that you can use to post 
      + codepen.io - can see code solutions
      + css-tricks.com 
**** HTML Basics
***** basics
      + HTML - Hypertext Markup Language
        + HTML - Structure
        + CSS - Style
        + Javascript - Behavior (add functionality)
***** standards
      + www.w3.org/TR/html5/ - from w3c group html5 standard
      + caniuse.com - keeps tracks of standards
      + https://validator.w3.org/#validate_by_uri - validate website
      + www.w3schools.com/browsers_stats.asp
      + www.google.com - look up for any updates and features
*** Week 2 - Introduction to CSS3
***** commonly used font
      + www.w3schools.com/cssref/css_websafe_fonts.asp
***** twitter bootstrap
      + html, css and js framework for developing responsive, mobile first 
        projects on the web - developed in twitter
      + most popular on github
      + download bootstrap-3.3.7-dist from getbootstrap.com/getting-started/ to dev folder
      + download jquery-3.1.0.min.js from jquery.com
*** Week 3 - Coding the Static Restaurant Site
*** Week 4 - Introduction to Javascript
*** Week 5 - Using Javascript to Build Web Applications
** course5: ruby on rails - single page web applications with angularjs
*** Week 1 - Introduction to AngularJS
**** Welcome and Importance resources
***** recommended books
      + web design with html, css, javascript and jquery set - jon duckett *
      + html and css: design and build website - jon duckett *
      + code complete: a practial handbook of software construction - steve mcconnell *
      + clean code: a handbook of agile software craftsmanship - robert c martin *
      + soft skills: the software developer's life manual - john sonmez *
      + learning web design: a beginner's guide to html, css, javascript and web graphics - jennifer 
        niederst robbins
      + learning web app development - semy purewal
      + mastering sublime text - dan peleg
      + pragmatic guid to git - travis swicegood *
      + pro git - scott chacon and ben straub
      + javascript: the definitive guide: activate your web pages - david flanagan
      + javascript: the good parts - douglas cockford
      + javascript and jquery: interactive front-end web development - jon duckett *
*** Week 2 - Filters, Digest Cycle, Controller Inheritance, and Custom Services
*** Week 3 - TBD
*** Week 4 - TBD
*** Week 5 - TBD


* Ruby on Rails Tutorial: Learn Web Development with Rails - michael hartl (https://www.railstutorial.org/book)
** chapter 1: from zero to deploy
   + embrace these inevitable stumbling blocks as opportunities
     + geek speak : "It's not a bug, it's a feature!"
   + Teaches basic grounding in ruby, rails, html & css, databases, version control,
     testing and deployment
   + Teaches the essentials of Rails framework, including MVC and REST, generators,
     migrations, routing and embedded Ruby
   + famous 15m weblog video by rails creator David Heinemeier Hansson
     + link : https://www.youtube.com/watch?v=Gzj723LkRJY
   + used by companies: airbnb, basecamp, disney, github, hulu, kickstarter, shopify,
     twitter and yello pages
   + web development shops: entp, thoughtbot, pivotal labs, hashrocket and happyfuncorp
   + gems: self-contained solutions to specific problems
     + link: https://rubygems.org
   + contributors: http://contributors.rubyonrails.org
   + conference: http://railsconf.com
   + prequisites
     + developer fundamentals
       + http://www.learnenough.com/command-line-tutorial
       + http://www.learnenough.com/text-editor-tutorial
       + http://www.learnenough.com/git-tutorial
     + web basics
       + http://www.learnenough.com/html-tutorial
       + http://www.learnenough.com/css-and-layout-tutorial
       + http://www.learnenough.com/javascript-tutorial
     + intro ruby web development
       + http://www.learnenough.com/ruby-tutorial
       + http://www.learnenough.com/sinatra-tutorial
       + http://www.learnenough.com/ruby-on-rails-tutorial
     + professional ruby web development
       + http://www.railstutorial.org/
   + resources
     + http://learnenough.com/story // learning resources
     + https://www.codeschool.com/ // online programming courses
     + http://turing.io/ // full-time, 27-week training program
     + http://bloc.io/ // online bootcamp with a structured curriculum
     + http://launchschool.com/railstutorial // online rails development bootcamp
     + http://www.thefirehoseproject.com/?tid=HARTL-RAILS-TUT-EB2&pid=HARTL-RAILS-TUT-EB2
       // mentor-driven, online coding bootcamp
     + http://www.thinkful.com/a/railstutorial // online class that pairs you with a professional
       engineer
     + https://pragmaticstudio.com/refs/railstutorial // online ruby and rails courses from mike
       and nicole clark along with dave thomas
     + https://tutorials.railsapps.org/hartl // top-specific rails projects and tutorials
     + http://guides.rubyonrails.org/ // topical and up-to-date rails references
   + cloud IDE runs inside an ordinary web browser, and hence works the same across different
     platforms, which is specically useful for operating systems (such as windows) on which rails
     development has historically been difficult
     + http://c9.io/ // excellent cloud development environment
   + http://installrails.com/ // try steps for local rails installation
   + % gem install rails -v 5.0.1 // installing rails
   + % rails new rort_mh_c1_hello_app // create a new rails app
   + file/directory
     + app // core app code incl models, views, controllers and helpers
     + app/asserts // app assets such as cascading style sheets (css), java script files and images
     + bin // binary exe files
     + config // app configuration
     + db // database files
     + doc // documentation for the application
     + lib // library modules
     + lib/assets // library assets such as cascading style sheets (css), java script files and images
     + log // application log files
     + public // data accessible to the public (e.g via web browsers) such as error pages
     + bin/rails // prog for generating code, opening console sessions or starting a local server
     + test // app tests
     + tmp // temp files
     + vendor // third-party code such as plugins and gems
     + vendor/assets // third-party assets such as cascading style sheets (css), 
                     // javascript files and images
     + README.md // brief description of app
     + Rakefile // utility tasks available via the rake command
     + Gemfile // gem requirements for this app
     + Gemfile.lock // list of gems used to ensure that all copies of the app use the same gem version
     + config.ru // a config file for rack middleware
     + .gitignore // patters for files that should be ignored by Git
   + % gem list <gemname> // info on gem
   + % bundle update; % bundle install // install gems
   + % rails server // run rails server
     + http://localhost:3000
   + % ruby -v // to see ruby version
   + model-view-controller (MVC)
     + http://en.wikipedia.org/wiki/Model-view-controller
     + model // ruby object that represents an element of the site (like user) and is in charge
       of communicating with the database
   + app/controllers/*_controller.rb // application current controllers
   + config/routes.rb // Rails router which sits in front of the controller and determines where to
     send requests that come in from the browser
   + deploying rails application
     + http://www.modrails.com/
     + http://engineyard.com/
     + http://railsmachine.com/
     + http://cloud.engineyard.com/ // cloud deployment services
     + http://heroku.com/ // cloud deployment services; makes deploying rails application very easy
       + to deploy
         + add "gem 'pg', '0.18.4'" in Gemfile
         + % bundle install --without production // to prevent local installation of any production gems
                                                 // updates Gemfile.lock file
         + % heroku login // on new terminal with user email and passwd
           + % heroku keys:add // if keys are note added
         + % heroku create // creates a place on heroku servers https://still-sands-30240.herokuapp.com/
         + % git push heroku master // deploy the application
           + % heroku open // open the app in a browser
       + other commands
         + % heroku rename rails-tutorial-hello // rename app
           + try random subdomain using ('a'..'z').to_a.shuffle[0..7].join 
       + http://www.railstutorial.org/ // lives at Heroku; heroku also supports custom domains
       + % heroku help // to see a list of heroku commands

** chapter 2: a toy app
   + create new rails app
     +  % rails new rort_mh_top_app
     + update Gemfile as http://gemfiles-4th-ed.railstutorial.org/
     + % bundle install --without production
   + add git repository
     + % git init; % git add -A; % git commit -m "Initialize repository"
       + % git checkout <commit> . // to checkout older commits
         // % git checkout 73f4f1c .
     + % git remote add origin git@github.com:aneelraju/rort_mh_c2_toy_app.git
     + % git push -u origin master
   + edit app/controllers/application_controller.rb and config/routes.rb files and git commit
   + deploy to heroku
     + % git commit -am "Add hello"
     + % heroku login
     + % heroku create
     + % git push heroku master
   + % rails generate scaffold User name:string email:string // generate resource User model
   + % rails db:migrate // update database with new users model
     // before Rails 5; % rake db:migrate - Rake is Ruby make
     // % rake test; to run the automated test suite
     + localhost:3000/users - index - page to list all users
       /users/1 - show - page to show user with id 1
       /users/new - new - page to make a new user
       /users/1/edit - edit - page to edit user with id 1
     + rails uses JavaScript to issue the request needed to destroy user
   + mvc steps 
     + browser issues a request for the /users URL
     + rails routes /users to the index action in the Users controller
     + the index action asks the user model to retrieve all users (User.all)
     + User model pulls all the users from the database
     + User model returns the list of users to the controller
     + controller captures the users in the @users variable, which is passed to the
       index view
     + view uses embedded Ruby to render the page as HTML
     + controller passes the HTML back to the browser
   + REST arch in Rails is based on the ideas of REpresentational State Transfer identified
     and named by computer scientist Roy Fielding
     + HTTP request : URL : Action : Purpose
       GET : /users : index : page to list all users
       GET : /users/1 : show : page to show user with id 1
       GET : /users/new : new : page to make a new user
       POST : /users : create : create a new user
       GET : /users/1/edit : edit : page to edit user with id 1
       PATCH : /users/1 : update : update user with id 1
       DELETE : /users/1 : destroy : delete user with id 1
   + app/models/user.rb // user model
   + app/views/users/index.html.erb // view for the user index
   + % rails generate scaffold Micropost content:text user_id:integer // generate Micropostes resource
   + % rails console // console for rails
     + >> first_user = User.first
     + >> first_user.microposts
     + >> micropost = fist_user.microposts.first
     + >> micropost.user
     + >> exit
   + deploying the toy app
     + % git status
     + % git add -A
     + % git commit -m "Finish toy app"
     + % git push
     + % git push heroku
     + % heroku run rails db:migrate // to migrate the production database

** chapter 3: mostly static pages
   + % rails new rort_mh_c3_sample_app
   + edit Gemfile as http://gemfiles-4th-ed.railstutorial.org/
   + % bundle install --without production
   + % bundle update
   + % git init; % git add -A; % git commit -m "Initialize repository"
   + edit README.md with useful info
   + % git commit -am "Improve the README"
   + % git remote add origin git@github.com:aneelraju/rort_mh_c3_sample_app.git
   + % git push -u origin master
   + edit to display "hello, world!"
   + % heroku login
   + % heroku create
   + % git push heroku master
   + % heroku logs // to check logs
   + % git checkout -b static-pages
   + % rails generate controller StaticPages home help // generating controller
     + because Ruby uses CamelCase for class names, my preferecne is to refer
       to controllers using their CamelCase names
     + since Ruby filenames typically use snake case, the Rails generator converts
       CamelCase to sanke case using the underscore method
     + % rails destroy controller StaticPages home help // to undo controller
       + % rails destroy model User // to undo model
     + % rails db:rollback // to undo a single migration step
     + % rails db:migrate VERSION=0 // to way back to the beginning
     + % rails db:migrate VERSION=10 // migrate to VERSION 10
     + % rails server -> % rails s
     + % rails console -> % rails c
     + % rails generate -> % rails g
     + % rails test -> % rails t
     + % bundle install -> % bundle
  + % git add -A
  + % git commit -m "Add a Static Pages controller"
  + % git push -u origin static-pages
  + HTTP
    + GET, POST, PATCH and DELETE refers to operation between a client and a server
    + GET -> used for reading data on the web
    + POST -> request sent by browser when you submit a form, used for creating things
    + PATCH and DELETE -> for updating and destroying things
  + edit app/views/static_pages/home.html.erb and help.html.erb
  + testing
    + Test-driven development uses a "Red, Green, Refactor" cycle
    + developed over the course of building an application, the resulting test suite serves
      as a safety net and as executable documentation of the application source code
    + it's a good practice to write and automated test to verify that the feature is implemented
      correctly
    + test-driven development: a testing technique in which the programmer writes failing tests
      first, and then writes the application code to get the tests passing
    + three main benefits
      + tests protect against regressions, where a functioning feature stops working for some
        reasons
      + tests allow code to be refactored with greater confidence
      + tests act as a client for the application code, thereby helping determine its design
        and its interface with other parts of the system
    + guidelines
      + when a test is especially short or simple compared to the application code it tests,
        lean toward writing the test first
      + when the desired behavior isn't yet crystal clear, lean toward writing the application
        code first, then write a test to codify the result
      + because security is a top priority, err on the side of writing tests of the security
        model first
      + whenever a bug is found, write a test to reproduce it and protect against regressions,
        then write the application code to fix it
      + lean against writing tests for code (such as detailed HTML structure) likely to change
        in the future
      + write tests before refactoring code, focusing on testing error-prone code that's especially
        likely to break
    + we write controller and model tests first and integration tests (which test functionality 
      across models, views and controllers) second. when we're writing application code that isn't
      particularly brittle or error-prone or is likely to change we'll often skip testing altogether
    + testing tools: controller tests, model tests and integration tests
    + integration tests are especially powerful, as they allow us to simulate the actions of 
      a user interacting with our application using a web browser. Integration tests will eventually
      be our primary testing technique
    + default test: test/controllers/static_pages_controller_test.rb
    + % rails test // to run test suite
      + % rails s // should run rails server
    + write a failing test for the About page // test/controllers/static_pages_controller_test.rb
    + % rails test
    + fix routes.rb
    + % rails test
    + fix static_pages_controller.rb
    + % rails test
    + touch app/views/static_pages/about.html.erb and edit
    + % rails test
  + slightly dynamic pages
    + mv app/views/layouts/application.html.erb layout_file // created by default, but it's instructive
      // to ignore it initially
    + HTML is not sensitive to whitespace, and ignore both tabs and spaces
    + add title test to test/controllers/static_pages_controller_test.rb
    + % rails test
    + add page titles to app/views/static_pages/home.html.erb help.html.erb and about.html.erb
    + % rails test
    + refactor test/controllers/static_pages_controller_test.rb
    + % rails test
  + remove duplication code
    + edit app/views/static_pages/home.html.erb help.html.erb and about.html.erb
    + .erb -> embedded ruby file, primary template system for including dynamic content in web pages
    + <% ... %> -> executes the code inside
    + <%= ... %> -> executes it and inserts the result into the template
    + % rails test
    + mv layout_file app/views/layouts/application.html.erb and edit for :title // rails comes with this special layout file
    + remove HTML structure in home.html.erb, help.html.erb and about.html.erb
    + % rails test
  + % git add -A
  + % git commit -m "Finish static pages"
  + % git checkout master
  + % git merge static-pages
  + % git push // to git
  + % rails test
  + % git push heroku // to heroku
  + advance testing setup
    + % git checkout master
    + edit test/test_helper.rb to use minitest-reporters gem
    + Guard to automate the running of the tests
      + Guard monitors changes in the filesystem so that, for example,
        when we change the static_pages_controller_test.rb file, only
        those tests get run. Even better, we can configure Gaurd so
        that when, say, the home.html.erb file is modified, the
        static_pages_controller_test.rb automatically runs
      + % bundle exec guard init // initialize guard
      + update Guardfile
      + guard uses spring server to speed up loading times while also
        preventing Guard from running the full test suite upon starting
      + add /sprint/*.pid directory to the .gitignore file
        + if your tests seem to be getting unusually sluggish, it's thus
          a good idea to inspect the system processes and kill them if
          necessary
          + % ps aux // to see all the processes on your system
          + % ps aux | grep spring // to grep spring processes
          + % kill -15 12241 // to kill pid=12241
          + % spring stop // first try stopping the processes with the spring command
          + % pkill -15 -f spring // using pkill with name spring
      + % bundle exec guard // run guard in new terminal
        + hit return on guard prompt to run all tests
        + sometimes gives an error indicating a failure to connect to the spring server.
          To fix the problem, just hit return again
        + Ctrl-D // to exit guard

** chapter 4: rails-flavored ruby
   + use rort_mh_c3_sample_app
   + % git checkout -b rails-flavored-ruby
   + stylesheet_link_tag : http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_link_tag
     + to include application.css for all media types
   + edit app/helpers/application_helper.rb for full_title function
   + edit application.html.erb to use full_title
   + edit test static_pages_controller_test.rb to remove Home
   + % rails test
   + edit home.html.erb 
   + % rails test
   + ruby tutorial
     + ruby help link : http://ruby-doc.org
     + comments
     + strings
     + printing
     + objects and message passing
     + method definitions
     + other data structures
       + arrays and ranges
       + blocks
       + hashes and symbols
         + symbols (:name) are like basically strings without all the extra baggage
     + ruby classes

** chapter 5: filling in the layout
   + Adding and editing markup wouldn't need tests. TDD only added to contact page
     + one important test, integration test added to check the links on the final layout
   + we'll add some structure to the layout and give it some minimal styling with CSS.
     In addition to use some custion CSS rules, we'll make use of Bootstrap, an open-source
     web design framework from Twitter. Also some code styling using partials to tidy up
     the layout once it gets a little cluttered
     + bootstrap link : http://getbootstrap.com/
   + % git checkout -b filling-in-layout
   + edit application.html.erb // with additional HTML structures, some additional divisions,
                               // some CSS classes, and the start of out site navigation
   + edit home.html.erb // a link to the signup page
   + copy http://railstutorial.org/rails.png to app/assets/images/
   + add gem 'bootstrap-sass' in Gemfile
     + bootstrap framework uses Less CSS language but Rails asset pipeline supports Sass language.
       so bootstrap-sass converts Less to Sass
   + % bundle install
   + % touch app/assets/stylesheets/custom.scss // though rails generate auto creates a separate CSS
     // for each controller, it's surprisingly hard to include them all properly in right order. so
     // we'll put all of the CSS needed in a single file
   + edit custom.scss to include bootstrap css framework
   + add some css to custom.scss that will be used site-wide for styling the layout and each
     individual page
     + in general, css rules refer either to a class, an id, an HTML tag or some combination thereof
       followed by a list of styling commands
   + add to custom.scss typography
   + add some rules to style the site's logo
   + partials
     + is used to package logical unit (HTML forms) in one place
     + edit application.html.erb with partials for the stylesheets and header
     + create _shim.html.erb and _header.html.erb
     + create _footer.html.erb also
   + asset pipeline
     + which significantly simplifies the production and management of static assets such as CSS,
       JavaScript and images
     + asset directories
       + app/assets: specific to the present application
       + lib/assets: for libraries written by your dev team
       + vendor/assets: from third-party vendors
       + each has subdirectories: images/, javascripts/, stylesheets/
     + mainfest files
       + once you've place your assets in their logical locations, you can use manifest files
         to tell Rails how to combine them to form single files
         + app/assets/stylesheets/application.css
       + for more details : http://guides.rubyonrails.org/asset_pipeline.html
     + preprocessor engines
       + After you've assembled your assets, Rails prepares them for the site template by running
         them through several preprocessing engines and using the manifest files to combine
         them for delivery to the browser
         + .scss for sass; .coffee for CoffeeScript; .erb for embedded Ruby
         + preprocessor engines can be chained: foobar.js.erb.coffee -> runs through CoffeeScript 
           and then ERb
     + asset pipleline combines all the application stylesheets into one CSS file (application.css),
       combines all the application JavaScript into one JavaScript file (application.js) ane then
       minifies them to remove the unnecessary spacing and indentation that bloats file size. The
       result is the best of both worlds: convenience in development and efficiency in production
     + Sass is a language for writing stylesheets that improves on CSS
       + nesting, variables and mixins
         + edit custom.scss for nesting
         + bootstrap variables : http://getbootstrap.com/customize/#less-variables
     + edit layout links 
       + "#" -> stubbed version of links; replace them
       + use common convention of using the _path form except when doing redirects, where
         use the _url form (HTTP requires a full URL after redirects)
       + get 'help', to: 'static_pages#help' creates help_path and help_url
       + % rails test
       + edit static_pages_controller_test.rb
       + % rails test
       + edit _header.html.erb, _footer.html.erb
   + integration tests
     + % rails generate integration_test site_layout
     + edit test/integration/site_layout_test.rb
       + assert_select "div" -> <div>foobar</div>
         assert_select "div", "foobar" -> <div>foobar</div>
         assert_select "div.nav" -> <div class="nav">foobar</div>
         assert_select "div#profile" -> <div id="profile">foobar</div>
         assert_select "div[name=yo]" -> div name="yo">hey</div>
         assert_select "a[href=?]", '/;, count: 1 -> <a href="/">foo</a>
         assert_select "a[href=?]", '/', text: "foo" -> <a href="/">foo</a>
     + % rails test:integration // run only integration test
     + % rails test // run full test suite
     + write direct test of full_title helper (test/helpers/application_helper_test.rb)
   + user signup
     + % rails generate controller Users new // create second controller Users
     + % rails test
     + edit routes.rb, users_controller_test.rb, home.html.erb, new.html.erb
   + commit and push changes to git and heroku       
     + % git remote show origin // check git remote origin
     + % git remote show heroku // check git remote heroku
     + % git remote rm origin // remove remote origin
   
** chapter 6: modeling users
   + examples of authentication and authorization systems
     + Clearance, Authlogic, Devise and CanCan
     + non-rails solucations built on top of OpenId or OAuth
   + It's better to write a custom authentication system
   + model - in rails, default data structure for a data model
   + default rails solution is to use database for long-term data
     storage, and the default library for interacting with database
     is called Active Record
   + Active Record - host of methods for creating, saving and finding
     data objects all without having to use SQL
   + Rails has a feature called migrations to allow data definitions
     to be written in pure ruby, without having to learn an SQL language
   + Book: SQLite for development and PostgreSQL (via Heroku) for deployment
   + % git checkout -b modeling-users
   + % rails generate model User name:string email:string // generate user model
     + controller names are plural and model names are singular
     + generates new file called a migration
       + db/migrate/[timestamp]_create_users.rb
       + "change" uses a Rails method call create_table
   + % rails db:migrate
     + creates db/development.sqlite3 which is SQLite database
     + DB browser for SQLite: http://sqlitebrowser.org/
     + rails uses a file called schema.rb in the db/ directory to keep track
       of structure of database
     + % rails db:rollback executes drop_table
   + migrations guide link : http://guides.rubyonrails.org/migrations.html
   + app/models/user.rb // user model code
     + % rails console --sandbox // loading development environment in sandbox
       + any modifications you make will be rolled back on exit
       + experiment with user model
   + commen validation cases: validating presence, length, format and uniqueness, confirmation
   + write a validity test in test/models/user_test.rb
     + for model validations, TDD is a perfect fit
   + % rails test:models
   + add validates to app/models/user.rb
   + % rails test:models
   + Rubular : interactive regular expression
   + Active Record uniqueness validation does not guarantee uniqueness at the database level
     + we need to enforce uniqueness at the database level as well as at the model level
       + we need to create a database index on the email column and then require that the index
         be unique
   + rails generate migration add_index_to_users_email // we are adding structure to an existing model
     + edit db/migrate/[timestamp]_add_index_to_users_email.rb to add add_index
   + rails db:migrate
     + test suite will fail due to a violation of the uniqueness constraint in the fixtures, which 
       contain sample data for the test database
       + edit test/fixtures/users.yml to remove code as we don't need it
       + link: http://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html
   + has_secure_password method
     + ability to save a securely hashed password_digest
     + a pair of virtual attributes (password and password_confirmation) including
       presence validations upon object creation and a validation requiring that they match
     + an authenticate method that returns the user when the password is correct
   + % rails generate migration add_password_digest_to_users password_digest:string
     + migration to add a password_digest // db/migrate/[timestamp]_add_password_digest_to_users.rb
   + % rails db:migrate
   + add gem 'bcrypt;, '3.1.11' to Gemfile
   + % bundle install
   + add has_secure_password to user.rb
   + % rails test
   + edit user_test.rb set_up function
   + % rails test
   + submit to git
     % rails test
     % git add -A
     % git commit -m "Make a basic User mode (including secure passwords)"
     % git checkout master
     % git merge modeling-users
     % git push
   + deploy to heroku
     % rails test
     % git push heroku
     % heroku run rails db:migrate
     
** chapter 7: sign up
   + % git checkout -b sign-up
   + add some debug info to app/views/layouts/application.html.erb
   + rails comes equipped with 3 environments: test, development and production
     + % rails console; % Rails.env => "development"; % Rails.env.test? => false
     + % rails console test // run console in test environment
     + % rails server --environment production // run rails server in production environment
     + % rails db:migrate RAILS_ENV=production // running production database
     + also % RAILS_ENV=production rails server // if using preceding
   + adding code for a pretty debug box, including a Sass mixin app/assets/stylesheets/custom.scss
   + % rails console; % User.create(name: "Michael Hartl", email: "mhartl@example.com",
     password: "foobar", password_confirmation: "foobar"); % User.count
   + REST architecture actions corresponding to four fundamental operations POST, GET, PATCH
     and DELETE defined by the HTTP standard
   + add "resources :users" in config/routes.rb
   + RESTful routes provided by the Users resource
     HTTP-request     URL        Action      Named-route          Purpose
     --------------------------------------------------------------------
     GET           /users        index      users_path        page to list all users
     GET           /users/1      show       users_path(user)  page to show a user
     GET           /users/new    new        new_user_path     page to make a new user(signup)
     POST          /users        create     users_path        create a new user
     GET           /users/1/edit edit       edit_user_path(user) page to edit user with id 1
     PATCH         /users/1      update     user_path(user)   update user
     DELETE        /users/1      destroy    user_path(user)   delete user
   + add app/views/users/show.html.erb
   + add "show" action in app/controllers/users_controller.rb
   + there is a more direct way to get debugging information using byebug gem
     + add line "debugger" to "show" action in app/controllers/users_controller.rb
     + when we visit /users/1, Rails server shows a byebuyg prompt "(byebug)"
       + (byebug) @user.name
       + (byebug) @user.email
       + (byebug) params[:id]
       + Ctrl-D to release prompt
   + remove "debugger" line from "show" action
   + whenever you're confused about something in a Rails application, it's a good practice
     to put "debugger" close to the code you think might be causing the trouble
   + inspecting the state of the system using byebug is a powerful method for tracking
     down application errors and interactively debugging your application
   + http://gravatar.com/ // Gravatar is a free service that allows users to upload images
     and associate them with email addresses they control
   + add user show view with name and Gravatar in app/views/users/show.html.erb
   + defining a gravatar_for helper method in app/helpers/users_helper.rb
   + adding a sidebar to the user show view app/views/users/show.html.erb
   + scss for styling the user show page, including the sidebar app/assets/stylesheets/custom.scss
   + signup form
     



** chapter 8: basic login
** chapter 9: advanced login
** chapter 10: updating showing and deleting users
** chapter 11: account activation
** chapter 12: password reset
** chapter 13: user microposts
** chapter 14: following users

* rails installation on ubuntu
  link: https://gorails.com/setup/ubuntu/16.04
** installing ruby
   + install some dependencies
     + % sudo apt-get update
     + % sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev nodejs
   + using rbenv
     + % cd
     + % git clone https://github.com/rbenv/rbenv.git ~/.rbenv
     + % echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
     + % echo 'eval "$(rbenv init -)"' >> ~/.bashrc
     + % exec $SHELL
     + % git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
     + % echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
     + % exec $SHELL
     + % rbenv install 2.4.0
     + % rbenv global 2.4.0
     + % ruby -v
     + % gem install bundler
   + configure git
     + % git config --global color.ui true
     + % git config --global user.name "YOUR NAME"
     + % git config --global user.email "YOUR@EMAIL.com"
     + % ssh-keygen -t rsa -b 4096 -C "YOUR@EMAIL.com"
     + % cat ~/.ssh/id_rsa.pub // add it to git ssh keys
     + % ssh -T git@github.com
** installing rails
   + install nodejs
     + % curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
     + % sudo apt-get install -y nodejs
   + install rails
     + % gem install rails -v 5.1.1
     + % rbenv rehash // to make rails executable
     + % rails -v
** setting up mysql
   + % sudo apt-get install mysql-server mysql-client libmysqlclient-dev
** setting up postgresql
   + % sudo sh -c "echo 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main' > /etc/apt/sources.list.d/pgdg.list"
   + % wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
   + % sudo apt-get update
   + % sudo apt-get install postgresql-common
   + % sudo apt-get install postgresql-9.5 libpq-dev
   + to setup a user
     + sudo -u postgres createuser chris -s
     + sudo -u postgres psql // If you would like to set a password for the user, you can do the following
     + % postgres=# \password chris
** final steps
   + using sqlite
     + % rails new myapp
   + using mysql
     + % rails new myapp -d mysql
   + using postgres
     + Note that this will expect a postgres user with the same username
       as your app, you may need to edit config/database.yml to match the
       user you created earlier
     + % rails new myapp -d postgresql
     + % cd myapp
     + If you setup MySQL or Postgres with a username/password, modify the
       config/database.yml file to contain the username/password that you specified
   + % rake db:create // create database
   + % rails server
   + visit local host http://localhost:3000



